%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: mrmcd2016TasseLang.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Nathalie Katrin Groll
%%CreationDate: 05.07.16
%%BoundingBox: 0 0 511 241
%%HiResBoundingBox: 0 0 510.2397 240.9399
%%CropBox: 0 0 510.2397 240.9399
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 60 8%%BeginData: 13022 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C4527F827F852FFFF5227F827F827F82727FFFF27F827F827F827F827%A9FFFF7DA8FFA827F827F827F827F827F827F87DFF52F827F827F8A8FFFF%2727F82727FFFFA8F827F827F827F8277DFF5227F827F82752FF7D27F827%F827F8A8FFA8F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F8A8FF275227F8F827F827F8FFA827F827F827F827F8277DA9F8%27F827F827F827F8A9FF59F852FFFF277D527D527D527D527D525252FF27%27F827F8277DFF5227F827F82752FF7D27F827F827F827F87DFF27F827F8%27F827A8FFA8A87D7D7DFD04FF52F827F827F827F827F827F827F827F827%F827F827F827F827F827F852FFFF5227522727F827F827FFA8F827F827F8%27F827F87DA827F827F827F827F827FFFFF827F8A8A82727522752275227%522752217DFF52F827F827F8A8FF27F827F827F827FF84F827F827F827F8%277DFFF827F827F827F8AFFFFF7D7D527D527D7DFFFF7DF827F827F827F8%27F827F827F827F827F827F827F827F827F87DFD04FF275259F821F82721%FF7D27F821F827F821F82752A8F827F821F827F821F8FF7D21F82752FFF8%27F821F827F821F827F82152FF2721F827F8217DA8F821F827F821F8A87D%21F827F821F827F87DFF27F827F827F827A859F821F827F821F827F852A8%A85227F827F821F827F821F827F821F827F821F827F82752FFFF7D277EFF%FF272727F827F827FFA8F827F827F827F827F87DA8FD07272127FF7DF827%F852A827F827F827F827F827F827F87DFF52F827F827F8A87D27F827F827%F8277DA8F827F827F827F8277DFF8427F827F8277DFFF827F827F827F827%F827F8A8FFFFFFA87D522727F827F827F827F827F82727537DA8FFFFA852%F827F852A8FFA8F827F82727FF7D27F827F827F827F82752A8277D525252%7D525227FF5227F82727A8F827F827F827F827F827F82752FF2727F827F8%27A8A82753527D5252277D7D27F827F827F827F87DFFFFA852277DA8FFFF%A82727F827F827F827277DFD08FFA8FFA8A87EFD04A8AFA8FD05FF5227F8%27F827F8277DFF27F827F827FF7DF827F827F827F827F87DA827F827F827%F827F827A87DF827F852A827F827F827F827F827F827F87DFF52F827F827%F8A87DFD04272827277DA8F827F827F827F827A8FFFFFFA8A87DA8FD04FF%A8A87DFD04A8FD18FFA82727F827F827F827F827272752525227FF7D21F8%27F821F827F82152A8F821F827F821F827F8FF5227F82127FFF821F827F8%21F827F821F82752FF2727F821F82784A8F827F821F827F87DA827F821F8%27F821F8A8FFA82727F821F82752FD06FF7D525227522752275228522752%275227522752A8FD05FFA852F827F821F827F821F827F82127F827F827FF%84F827F827F827F827F87DA827F827F827F827F827A87DF827F852FF52F8%27F827F827F827F827F87DFF52F827F827F8A8A827F827F827F827A8FF27%27F827F827F827FFA8F827F827F827F82727FFFFFFA827F827F827F827F8%27F8522727F827F827F827F827A8FFFFFF7D27F827F827F827F827F827F8%27F8F827F827F8FF7D27F827F827F827F82752A8F827F827F827F827F8FF%7D2727277DFF842727522752275227522752A9FF7D2727522752A8FF5228%2752275252FFFF7D27522752272752FF522727522752275227277DFFFF7D%2152275227522752274C5227F827F827F827F827F827FFFF2727F827F827%F827F827F827F827F82727F827F827FFA8F827F827F827F827F87DA927F8%27F827F827F827FFA827FD44FF7D2727F827F827F827F827F8A87D27F827%F827F827F827F827F827F827F8F821F82721FF7D27F821F827F821F82752%FF7E27F821F827F8277DFFFF7DA8FD43FF5227F821F827F821F827F8217D%FF7D21F827F821F827F821F827F821F82727F827F827FFA8F85227522752%2752F852FFFFFFA87D7D7DA8FD49FF7D2727F827F827F827F827F8A8FFFF%A852F827F827F827F827F827F827F8F827F82727FF7DFD042752FD042752%FD51FF5227F827F827F827F827F852FD05FFA82727F827F827F827F827F8%2727F827F87DFF7DF852275227522752F852FD04FF7D7D7DFD05FFA8FD44%FF7DF827F827F827F827F852A8FD07FF5327F827F827F827F8277DF827F8%27A8FF7D21FD07272152FFFF7DF827F821F8A8FFFFA852A8FD43FF525252%7D527D5252527DA8FFA87D272727527DFFA827F827F821F852A8FFA87DA8%FFFFFF7DF852275227522752F87DFFA8F827F827F827F8FFFF7D27FD47FF%7D7D7DFD05FF5327F853527D272727FFFF7DF82721A8FF7D21FFFFA8FFFF%FF7D27275227522752272752FF2727F827F827F82752FF2752FD25FFA87D%FFFF7D52A8FFFFA87D52A9FFFFA8A8FFFFFFA8527DFD0AFF2727F8277DFF%FFFF5227527D5252527D7D27F8A8FFA87DFFFF52F82752F82727A8FF7DF8%52275227522752F87DA827F827F827F827F852FF2727FD25FFA852FF7D52%A827A8FF527DA852FFA82752FFFFA852A87DFD09FFA827F827F827FFFF7D%277D7DF827F827F8527D2727FD04FF7DF827F8F821F827F8A87DFD042752%FD042752FFF827F821F827F82127FF2727A8FD06FFA87DA852A8A87D52FF%7DA87D7D7DFF7D52A8A8527EFFFF7D5252A8FFA8527D27FFA8FFFF7D52A8%52FFFF7D7DA87D53FFFF27FD0BFF7DA8F821F827F8FFA827527DF827F821%F827F8277D277DFFFFFF2121F82727F827F82752A8F852275227522752F8%7DFF52F827F827F827F8A8FF7D27FD07FFA8277DFF2752A87D7DFF277DA8%7D27A87D277DFF28FFA852A87D7DA852FF7D27FD04FF27FF7D7DFFFF7D7D%FFFF52FFA8527D7D52FD08FF7DA827F827F827FFA8F87D2727F827F827F8%27F87D5252FFFFA827F827F8F827F827F827A8FD042752FD04277DFFA827%F827F827F84CA8FFA852A8FD07FF27FFFF7D7DFF847DFF52A8FF7D7DFFFF%27FFFF7D7D7DA8FFFFFF52A8FFFF52FFFF7D27A8FF7D7DFFFF7D59FFA852%FF7D52FFFF527DFD07FF52A8F827F82727FF52277D27F827F827F827F827%527DF8FFFFFFF827F82727F827F82727FF7D2727522752272752FFFFFFA8%52F827007DFD04FFA8FD08FF52FFFF52A8FFA87DFF52FFFF7D7DFFFF52FF%FF52A852A8FFFFFF7DA8FFFF52FF7D7DFFFFFF847DFFFF5284FFFF52FFA8%52FFFF7D7DFD07FF7D84FD042752FF7D277EF827F827F827F827F8525227%FFFFA827F827F8F827F821F827FFFF7D27F821F82752FD07FFA8FD0FFF27%FFFF537DFF7D52A852A8FF7D7DFFFF27FFFF7D7DA827A87D7D84527D7DF8%A8527D7D7D52FF527D7D52A8FF59277DFF52527D52A8FD07FF7DA8F8FD04%27FF7D217D27F821F827F821F827525227FFFFA8F827F82127F827F82727%FD04FFA87DA8A8FD1BFFA8FFFFFFA8FFA8FFFFFFA8FD06FFA8FFFF7D7EA8%FFA87DA8FFA8FF7DA87DFFFFFF7D7DFFFFFD04A8FFFF7D7DA8FD09FFA827%F827F827FFFFF87D5227F827F827F82721A8F87DFFFFA827F827F8F827F8%27F827FD04FF5252275227272752272727522752A8FD4AFFA8F827F827F8%FFFF52F87E2727F827F827F87D5227A8FFFFA9F827F82727F827F82727FF%FFFF2727F827F827F8522727F827F827F827A8FFFFFFA8FD45FFA827F827%F827FFFFA927F8A87D52272752A852277DFFFFFFA827F827F8F821F827F8%27A8FF5221F827F821F8272752F827F821F827F852FFFFA852A8FD09FF7D%FFA8FD19FFA87DFD05FFA8A8FFFFA8FD06FFA8A8FD0AFFA8A8F821F82727%FFFFFFA827F852FD047DF8217DFD05FFF821F82727F827F82727FFFF27F8%27F827F827F8525227F827F827F827F8FFFF7D27FD08FFA87D7DA8FFFFA8%A8FFFD07A8FFA87DA8FF7DA8FFA87DFFA8FFFFFF7DFFA8A87EA8A8A852FF%A8FF7DFFFFA87DFF52A8A8FD08FF27527DF827F8A8FD05FFA82727F827F8%52A8FD05FFA827F827F8F827F827F827FFFFF827F827F827F8272752F827%F827F827F82784FF2727FD07FFA859A87DA87DFF7D52A87DA8527D52A87D%7D7DA87D7D52A8A8527D7DFFA8FFFF7D52A87D52A8A87D7DA87D7D52A87D%7DA87E7DA87DA8FD07FF2727A8A87DA8FFFFA8A87D7D7EFFA8A8A8FFFFA8%52527DFFFFFFF827F82727F827F82727FFA827F827F827F827F8525227F8%27F827F827F8A8FF2752FD07FFA8A8FF7DA87D7DA852A87DFF7DA87DFF7D%7D7DFF7DA8A87D7D7DA8FD05FF7D52A8A8A8FF7DA87DFF59FF7D7D52FFFF%FF7DFF7DA8FD07FF52F852FFFFFF7D2727F827F827F852A8FFFFA8F827F8%2752FFA827F827F8F827F821F827FFA8F827F821F827F8212752F821F827%F821F8277DFFF852FD08FF527D52A87D7D527DA8A85352A8A8FF7EA87D52%7DA87D52AF7D7DA8A8A8FFA8A8A87D7DFFFF7DA87DA8FD047DA8527D84A8%FFA87DFD07FF2721F8FFFF52F827F8212727F821F8277DFF2727F821F827%A8FFF827F82127F827F82727FFA827F827F827F827F8525227F827F827F8%27F8FFFF2727FD11FFA87D7DFD30FF52F827A8A8F827F827F8522727F827%F827A852F827F827F8A8FF27F827F8F827F827F827FFFF2727F827F827F8%272752F827F827F827F827FFFF5227FD12FFA8FD31FF2727F8A87D27F827%F8272727F827F827F8A82727F827F8277DFFF827F82727F827F82727FFFF%A8F827F827F827F8525227F827F827F8277DFFFFA827FD44FF52F8277DA8%F827F827F8522727F827F852FF52F827F827F8A8FF27F827F8F821F827F8%7DFFFFFF7DF827F821F827F827F827F821F82752FD04FF7DA8FD43FF2727%F852FF7DF821F8272E27F827F827A8FF2721F827F8217DFFF821F82727F8%27F87DFD05FFA87DFD05A87DA87DA87DA8A8FD4AFF52F82752FFFFFF5352%FD042752A8FFFFFF52F827F827F8A8FF27F827F8FFA87DFD09FFA8A87DFD%06FF7D277DFD18FFA8FD09FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFFFA852FF%FFFFA8FFA8FF7DA8FD0EFF2727F852FD06FFA8FD07FF2727F827F8277DFF%F827F827A8FD0AFF5227F827F8A8FFFFFF7DF827F852FD13FFA8FD047D84%7D7DA87DA87DA8A8A8527D527D7DA87D7D537D7D7DA8A87D7DFFA852FD06%7DFD0EFF52F82752FFFFAFA8AFA8FFA8FFA8AFFFFFFF52F827F827F8A8FF%27F827F8F8FD09FF7D21F827F821F8FFFFA8F827F821F8A8FFFFFFA8FD0F%FF525252A87D52527DA8527D52FF7DA87DFF7D7DA87DA87DA8597DFF52A8%7DFF7DA8A8527DA87DA8FD0EFF2721F87DA827F827F8212727F821F827A8%FF2727F821F8277DFF2727F821277DFFFF7D277DFFFFFF52F827F827F827%7DFF5327F827F82752FFFF7D27FD0FFFA8FFA8FFA8FFA8FFFFA8A8FD06FF%A8A8FFA8FFA8FFA8A87DFF7DA8A8FFFFFFA8A8A8FFA8FD0EFF52F8277D7D%F827F827F8522727F827F852FF52F827F827F8A8FFA8F827F8277DFF52F8%27F852FFFF2727F827F827F87DFF27F827F827F827FFA8F852FD44FF2727%F87D2727F827F8272727F827F827F8A82727F827F8277DFFFF7DF8275252%A8F827F827F8A8FF52F827F827F8277DFFF827F827F827F8FFA82727FD44%FF52F8277D27F827F827F8522727F827F8277D52F827F827F8A8FD04FF7D%F87D5227F821F82752FF2727F821F827F87DA827F821F827F8217DAFF828%A8FD43FF272727A8F827F821F8272727F827F821F8A85921F827F821A8FF%FFFF7DA827A852F827F827F852FF52F827F827F8277DA8F827F827F827F8%7DA82727FD44FF52F87DFF27F827F827F8522727F827F827FFFF5227F827%7DFFFF7DF827F852FF27525252275227FF2727F827F827F87D7D27F827F8%27F82752A8F852FD44FF2727A8FF5927F827F8272E27F827F82752FFFFFF%A8A8A8FFFF7DF827F827FFFF52F8272727F852FF522752FD04277D7DF827%F827F827F87DA82727FD44FF527DFFFFFF7D5252522752FD042752FD09FF%F827F827F8FFFF5221F827F82152FF525227522752277D5221F827F821F8%2728A8F852FD46FFA8A8FD057DA87EFD06FFA82727F82752FF7D21F827F8%21FFFFA8F827F827F8A8FF52F827F827F8277D7DF827F827F827F852A827%277D527D597D527DA8FFFFFF7D7D7DAFFFA8527D7D7D527D597D527D597D%527DA8FD07FFA8FD06FF7D527D527D537D7D7D597D527D7DFD07FFA87D27%27F827F827F827F82727527DFFFFFFF827F827F8277DA8F827F827F8FFFF%FF52F827F852FFFF2727F827F827F87D5227F827F827F82752A8F827F827%F827F827F8A8FF7DF827F827F852A87DF827F827F827F827F827F8277D7D%27A8FFFFFF7DF827F827A8FFFFA8F827F827F827F852F827F827F82752FD%05FF7D27F827F827F827F827F827F827F827F8A8A827F827F827F87DA827%F827F82753A8FFA952F852A8FFFF52F827F827F8277D7DF827F827F827F8%7DA827F827F827F827F827A884F827F827F827F853FFFF5227F827F827F8%27F87DFFA8F82727FFFF7DF827F827F827A8FF5227F827F827F8275227F8%27F827F827FD04FFA827F827F827F827F827F827F827F827F82727FF2727%F827F82752FF5227F827F8F8217DFD07FF2727F821F827F87D7D27F821F8%27F82152FFF821F827F821F827F8A8F827F821F827F821F8A8FFFF7D27F8%21F8272EA8FFFF2721F8277DFFF827F821F827F87DFF27F821F827F82127%52F821F827F821F8A8FD04FF2721F827F821F827F821F827F821F827F852%A827F821F827F87DFFFF5221F82727F852FD07FF52F827F827F8277DA8F8%27F827F827F8A8FF7DF827F827F827F8A88427F827F827F827F8277DFD04%FF7DF82784FFFFFFA827F827F87DA827F827F827F82752FF2727F827F827%F8285227F827F827F827A8FD05FF5227F827F827F827F827F827F827007D%FFFF2127F827F82752FFFFFFA87D7DF8277DFFA8A8FD04FF2727F827F827%F87DA827F827F827F8277DFFFFA8FD04527DFFFF7EF827F827F827F827F8%7DFFFFA8FFA8A8A8FFA8FFFFA8F827F82752A8F827F827F827F852A827F8%27F827F8272752F827F827F827F8A8FF7D2752A8FFA8A85252FD05275252%7D7DFFFFFFA827F827F827F87DFD05FFA852A8FF7D27F87DA8FFFF7DF827%F827F827A8FF2727F827F82700FD06FFAF7DA8A8FFA827F827F827F827F8%277DFF272700272727F82752FF7D27F827F852A827F827F827F82752FF52%27F827F827F8275227F827F827F827FF7DF827F852FD06FFA8FFA8FFA8FD%07FFF827F827F82752FFFFFF5227F8FFA82721F827F8277DFFFF52F827F8%217DFFFF52F827F821F852FD05FF52F827F82152FF2721F827F821F827F8%FF5227F821F827F821F8277D84F827F82127A8F821F827F821F852FF7DF8%27F821F8272752F827F821F82752FFF827F821F8FFFF7DFD0C2752FFA821%F827F821F87DFFA8F827F8217DF827F827F827F82752FFFFA87D7DA8FFFF%FFA827F827F8277DFD04FF7DF827F827F8277DFF2727F827F827F8A8FF7D%F827F827F827F827F8A87D27F827F852A827F827F827F82727FFFF52F827%F827F8272727F827F82727FFFF27F827F827FFA8F827F827F827F827F827%F827F82752FF7D27F827F87DFFFFF8270027F8F827F827F827F827F827F8%7DFD08FF2727F82727FD05FFF827F827F827F827A9FF5227F82727A8FFFF%A87D275227525252277DFF7DF827F827F8A8F827F827F827F827FFFFFFA8%7D7D7D847D7D7D847D7D7DFFFFFFF827F827F8FF5227F827F827F827F827%F827F827F827FFFFA8A8A8FFFFFF7D27F827F827FD0B7D52A8FD08FF7D7D%7DA9FD04FFA8FD087DFD15FFA8FD047D84A8FD087DFD12FFFD057DA9A8FD%0F7DFD09FFFD057DFD7FFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">mrmcd2016TasseLangBLACK</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2016-07-05T20:17:46+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-07-05T20:17:46+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-07-05T20:17:46+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>124</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAfAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A865JL6M1nzTqen/84h6A&#xA;scz+pq1zJpckoNGFutzdNwr4GO2Efy2wK+c8Kro5JI5FkjYpIhDI6kggg1BBHQjFXs//ADkH5k1D&#xA;zB5b/LrUb1y011pLzzjopnYxrK4H+UUwKHi2FXo//OOzun5y+WyrFSZLhTTuDaygjApZr+dH57+c&#xA;7L81Jrby9qUlppvl2YW4tY2/dXE0dPX+sIPtjnVKHoBUUJxVM/8AnJPXfLetJ5C1vUIrqTStS0+5&#xA;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&#xA;fmf9yrFX/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:0080117407206811BA8A9E8DD594900C</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:0080117407206811BA8A9E8DD594900C</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:VersionID>1</xmpMM:VersionID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:1675131d-9203-1849-81b3-6c0861f91cfa</stRef:instanceID>
            <stRef:documentID>xmp.did:FE7F11740720681199F1AE394BC0D616</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:versionID>1</stRef:versionID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D27F11740720681191099C3B601C4548</stEvt:instanceID>
                  <stEvt:when>2008-04-17T14:19:15+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F1174072068118D4ED246B3ADB1C6</stEvt:instanceID>
                  <stEvt:when>2008-05-15T16:23:06-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F1174072068118D4ED246B3ADB1C6</stEvt:instanceID>
                  <stEvt:when>2008-05-15T17:10:45-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:EF7F117407206811A46CA4519D24356B</stEvt:instanceID>
                  <stEvt:when>2008-05-15T22:53:33-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07F117407206811A46CA4519D24356B</stEvt:instanceID>
                  <stEvt:when>2008-05-15T23:07:07-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T10:35:43-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T10:40:59-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:26:55-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FB7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:29:01-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FC7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:29:20-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FD7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:30:54-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FE7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:31:22-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B233668C16206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T12:23:46-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B333668C16206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T13:27:54-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B433668C16206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T13:46:13-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F11740720681197C1BF14D1759E83</stEvt:instanceID>
                  <stEvt:when>2008-05-16T15:47:57-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F11740720681197C1BF14D1759E83</stEvt:instanceID>
                  <stEvt:when>2008-05-16T15:51:06-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F11740720681197C1BF14D1759E83</stEvt:instanceID>
                  <stEvt:when>2008-05-16T15:52:22-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F117407206811B628E3BF27C8C41B</stEvt:instanceID>
                  <stEvt:when>2008-05-22T13:28:01-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FF7F117407206811B628E3BF27C8C41B</stEvt:instanceID>
                  <stEvt:when>2008-05-22T16:23:53-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:07C3BD25102DDD1181B594070CEB88D9</stEvt:instanceID>
                  <stEvt:when>2008-05-28T16:45:26-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F1174072068119098B097FDA39BEF</stEvt:instanceID>
                  <stEvt:when>2008-06-02T13:25:25-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811BB1DBF8F242B6F84</stEvt:instanceID>
                  <stEvt:when>2008-06-09T14:58:36-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F117407206811ACAFB8DA80854E76</stEvt:instanceID>
                  <stEvt:when>2008-06-11T14:31:27-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0180117407206811834383CD3A8D2303</stEvt:instanceID>
                  <stEvt:when>2008-06-11T22:37:35-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:01E540664A3DDD11BD33D3EB8D3A1068</stEvt:instanceID>
                  <stEvt:when>2008-06-18T22:24:01+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6B6AE2A5723EDD11A6F1BABF7C5A7A51</stEvt:instanceID>
                  <stEvt:when>2008-06-19T20:30:34-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4092E9E2EA41DD1182ECEC1AE8587645</stEvt:instanceID>
                  <stEvt:when>2008-06-24T16:20:02+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:E6A26685200711689FE8CB9EA85C5459</stEvt:instanceID>
                  <stEvt:when>2008-06-26T05:49:50-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F79456976A48DD1194DA8463B7D22218</stEvt:instanceID>
                  <stEvt:when>2008-07-02T12:12:23-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F117407206811B1A49BC4792F6CFA</stEvt:instanceID>
                  <stEvt:when>2008-07-21T18:23:38+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:498BDF92CE5CDD11805FF6297D832673</stEvt:instanceID>
                  <stEvt:when>2008-07-28T10:56:58-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4A8BDF92CE5CDD11805FF6297D832673</stEvt:instanceID>
                  <stEvt:when>2008-07-28T10:57:16-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F1174072068118DBB8F5DDEBEE9D6</stEvt:instanceID>
                  <stEvt:when>2008-09-29T21:06:48-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F1174072068118DBB8F5DDEBEE9D6</stEvt:instanceID>
                  <stEvt:when>2008-09-29T21:07:22-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2A40717309206811B1BE94AF60EC0B71</stEvt:instanceID>
                  <stEvt:when>2008-08-04T10:59:11+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:CA07664B0C206811B1BE94AF60EC0B71</stEvt:instanceID>
                  <stEvt:when>2008-08-04T10:59:23+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F11740720681199F1AE394BC0D616</stEvt:instanceID>
                  <stEvt:when>2016-06-27T12:49:38+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F11740720681199F1AE394BC0D616</stEvt:instanceID>
                  <stEvt:when>2016-06-27T13:03:15+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F11740720681199F1AE394BC0D616</stEvt:instanceID>
                  <stEvt:when>2016-06-27T14:22:21+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FE7F11740720681199F1AE394BC0D616</stEvt:instanceID>
                  <stEvt:when>2016-06-27T18:12:38+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0080117407206811BA8A9E8DD594900C</stEvt:instanceID>
                  <stEvt:when>2016-07-05T20:17:46+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>180.001244</stDim:w>
            <stDim:h>84.998429</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Standard-Farbfeldgruppe</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.00</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfxid="http://www.npes.org/pdfx/ns/id/">
         <pdfxid:GTS_PDFXVersion>PDF/X-4</pdfxid:GTS_PDFXVersion>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:GTS_PDFXVersion>PDF/X-4</pdfx:GTS_PDFXVersion>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -240.94 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 240.94 li
510.24 240.94 li
510.24 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 240.94 mo
510.24 240.94 li
510.24 0 li
0 0 li
0 240.94 li
cp
clp
71.4346 77.5464 mo
71.4346 87.2974 79.3237 95.1973 89.0796 95.1973 cv
98.8306 95.1973 106.733 87.2974 106.733 77.5464 cv
106.733 67.8042 98.8306 59.8965 89.0796 59.8965 cv
79.3237 59.8965 71.4346 67.8042 71.4346 77.5464 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
67.729 194.559 mo
42.1909 194.559 li
42.1909 193.263 li
67.729 193.263 li
67.729 194.559 li
cp
54.9458 154.921 mo
46.9038 154.921 40.397 161.445 40.397 169.488 cv
40.397 193.911 li
40.397 218.338 li
40.397 226.381 46.9038 232.899 54.9458 232.899 cv
62.9888 232.899 69.5181 226.381 69.5181 218.338 cv
69.5181 193.911 li
69.5181 169.488 li
69.5181 161.445 62.9888 154.921 54.9458 154.921 cv
f
69.0391 147.486 mo
66.9971 147.486 li
66.9971 107.283 li
69.0391 107.283 li
69.0391 147.486 li
cp
91.0952 103.958 mo
68.022 103.958 li
44.9482 103.958 li
37.3589 103.958 31.2031 114.214 31.2031 126.872 cv
31.2031 139.519 37.3589 149.791 44.9482 149.791 cv
68.022 149.791 li
91.0952 149.791 li
98.6812 149.791 104.837 139.519 104.837 126.872 cv
104.837 114.214 98.6812 103.958 91.0952 103.958 cv
f
11.0439 187.291 mo
32.7549 187.291 li
32.7549 188.548 li
11.0439 188.548 li
11.0439 187.291 li
cp
21.894 165.926 mo
14.562 165.926 8.61377 175.773 8.61377 187.928 cv
8.61377 200.066 14.562 209.915 21.894 209.915 cv
29.229 209.915 35.188 200.066 35.188 187.928 cv
35.188 175.773 29.229 165.926 21.894 165.926 cv
f
453.252 71.0884 mo
442.098 71.0884 433 80.1812 433 91.3643 cv
433 102.526 442.098 111.617 453.252 111.617 cv
464.42 111.617 473.526 102.526 473.526 91.3643 cv
473.526 80.1812 464.42 71.0884 453.252 71.0884 cv
f
453.252 114.341 mo
440.599 114.341 430.284 104.021 430.284 91.3643 cv
430.284 78.6914 440.599 68.3813 453.252 68.3813 cv
465.936 68.3813 476.24 78.6914 476.24 91.3643 cv
476.24 104.021 465.936 114.341 453.252 114.341 cv
453.252 62.5044 mo
437.33 62.5044 424.407 75.4214 424.407 91.3643 cv
424.407 107.286 437.33 120.203 453.252 120.203 cv
469.198 120.203 482.111 107.286 482.111 91.3643 cv
482.111 75.4214 469.198 62.5044 453.252 62.5044 cv
f
475.343 120.84 mo
468.575 120.84 463.092 126.328 463.092 133.091 cv
463.092 153.644 li
463.092 174.202 li
463.092 180.964 468.575 186.448 475.343 186.448 cv
482.1 186.448 487.583 180.964 487.583 174.202 cv
487.583 153.644 li
487.583 133.091 li
487.583 126.328 482.1 120.84 475.343 120.84 cv
f
353.002 9.4458 mo
340.27 9.4458 329.951 13.2427 329.951 17.9189 cv
329.951 22.5928 340.27 26.3896 353.002 26.3896 cv
365.736 26.3896 376.051 22.5928 376.051 17.9189 cv
376.051 13.2427 365.736 9.4458 353.002 9.4458 cv
f
433.606 191.491 mo
432.131 191.491 li
432.131 162.397 li
433.606 162.397 li
433.606 191.491 li
cp
449.564 159.986 mo
432.87 159.986 li
416.171 159.986 li
410.674 159.986 406.221 167.41 406.221 176.575 cv
406.221 185.728 410.674 193.155 416.171 193.155 cv
432.87 193.155 li
449.564 193.155 li
455.058 193.155 459.516 185.728 459.516 176.575 cv
459.516 167.41 455.058 159.986 449.564 159.986 cv
f
434.332 149.819 mo
432.87 149.819 li
432.87 124.667 li
434.332 124.667 li
434.332 149.819 li
cp
433.595 121.852 mo
419.521 121.852 408.114 128.741 408.114 137.243 cv
408.114 145.737 419.521 152.632 433.595 152.632 cv
447.672 152.632 459.084 145.737 459.084 137.243 cv
459.084 128.741 447.672 121.852 433.595 121.852 cv
f
416.914 94.8369 mo
399.323 94.8369 li
399.323 93.9512 li
416.914 93.9512 li
416.914 94.8369 li
cp
408.114 67.5449 mo
402.574 67.5449 398.088 72.0327 398.088 77.5737 cv
398.088 94.3921 li
398.088 111.226 li
398.088 116.762 402.574 121.251 408.114 121.251 cv
413.661 121.251 418.142 116.762 418.142 111.226 cv
418.142 94.3921 li
418.142 77.5737 li
418.142 72.0327 413.661 67.5449 408.114 67.5449 cv
f
458.14 227.801 mo
458.14 214.521 li
458.14 201.235 li
458.14 196.863 464.045 193.322 471.331 193.322 cv
478.618 193.322 484.523 196.863 484.523 201.235 cv
484.523 214.521 li
484.523 227.801 li
484.523 232.168 478.618 235.717 471.331 235.717 cv
464.045 235.717 458.14 232.168 458.14 227.801 cv
f
213.218 236.788 mo
212.546 236.788 li
212.546 223.497 li
213.218 223.497 li
213.218 236.788 li
cp
225.595 222.57 mo
212.878 222.57 li
200.163 222.57 li
195.979 222.57 192.587 225.953 192.587 230.144 cv
192.587 234.328 195.979 237.716 200.163 237.716 cv
212.878 237.716 li
225.595 237.716 li
229.777 237.716 233.165 234.328 233.165 230.144 cv
233.165 225.953 229.777 222.57 225.595 222.57 cv
f
418.06 230.953 mo
418.06 231.593 418.583 232.116 419.227 232.116 cv
419.871 232.116 420.4 231.593 420.4 230.953 cv
420.4 230.304 419.871 229.776 419.227 229.776 cv
418.583 229.776 418.06 230.304 418.06 230.953 cv
f
414.788 230.953 mo
414.788 231.593 415.309 232.116 415.961 232.116 cv
416.6 232.116 417.126 231.593 417.126 230.953 cv
417.126 230.304 416.6 229.776 415.961 229.776 cv
415.309 229.776 414.788 230.304 414.788 230.953 cv
f
411.442 230.953 mo
411.442 231.593 411.959 232.116 412.603 232.116 cv
413.249 232.116 413.777 231.593 413.777 230.953 cv
413.777 230.304 413.249 229.776 412.603 229.776 cv
411.959 229.776 411.442 230.304 411.442 230.953 cv
f
408.163 230.953 mo
408.163 231.593 408.684 232.116 409.334 232.116 cv
409.975 232.116 410.501 231.593 410.501 230.953 cv
410.501 230.304 409.975 229.776 409.334 229.776 cv
408.684 229.776 408.163 230.304 408.163 230.953 cv
f
405.027 230.953 mo
405.027 231.593 405.545 232.116 406.192 232.116 cv
406.837 232.116 407.361 231.593 407.361 230.953 cv
407.361 230.304 406.837 229.776 406.192 229.776 cv
405.545 229.776 405.027 230.304 405.027 230.953 cv
f
401.749 230.953 mo
401.749 231.593 402.27 232.116 402.924 232.116 cv
403.563 232.116 404.089 231.593 404.089 230.953 cv
404.089 230.304 403.563 229.776 402.924 229.776 cv
402.27 229.776 401.749 230.304 401.749 230.953 cv
f
398.403 230.953 mo
398.403 231.593 398.926 232.116 399.571 232.116 cv
400.214 232.116 400.737 231.593 400.737 230.953 cv
400.737 230.304 400.214 229.776 399.571 229.776 cv
398.926 229.776 398.403 230.304 398.403 230.953 cv
f
418.252 195.933 mo
398.337 195.933 382.192 201.857 382.192 209.176 cv
382.192 216.497 398.337 222.425 418.252 222.425 cv
438.172 222.425 454.31 216.497 454.31 209.176 cv
454.31 201.857 438.172 195.933 418.252 195.933 cv
f
106.733 198.451 mo
106.733 173.152 99.1885 152.634 89.8936 152.634 cv
80.6006 152.634 73.0684 173.152 73.0684 198.451 cv
73.0684 217.697 77.4253 234.155 83.5986 240.94 cv
96.1914 240.94 li
102.368 234.155 106.733 217.697 106.733 198.451 cv
f
135.612 224.765 mo
126.637 224.765 119.348 231.989 119.223 240.94 cv
152.014 240.94 li
151.889 231.989 144.6 224.765 135.612 224.765 cv
f
387.141 229.274 mo
387.141 223.733 382.656 219.248 377.105 219.248 cv
371.559 219.248 367.082 223.733 367.082 229.274 cv
367.082 240.94 li
387.141 240.94 li
387.141 229.274 li
cp
f
442.625 226.944 mo
423.016 226.944 li
403.403 226.944 li
396.947 226.944 391.711 232.178 391.711 238.63 cv
391.711 239.422 391.792 240.194 391.941 240.94 cv
396.297 240.94 li
399.571 240.94 li
402.924 240.94 li
406.192 240.94 li
409.334 240.94 li
412.604 240.94 li
415.961 240.94 li
419.228 240.94 li
423.016 240.94 li
454.083 240.94 li
454.232 240.194 454.313 239.422 454.313 238.63 cv
454.313 232.178 449.081 226.944 442.625 226.944 cv
f
259.056 231.929 mo
259.056 215.671 254.213 202.5 248.246 202.5 cv
242.27 202.5 237.434 215.671 237.434 231.929 cv
237.434 235.073 237.617 238.1 237.952 240.94 cv
258.539 240.94 li
258.874 238.1 259.056 235.073 259.056 231.929 cv
f
105.337 22.9897 mo
73.0957 22.9897 li
73.0957 21.353 li
105.337 21.353 li
105.337 22.9897 li
cp
106.688 -.414063 mo
72.5645 -.414063 li
71.7227 .850098 71.2466 2.2251 71.2466 3.66895 cv
71.2466 22.1748 li
71.2466 40.6812 li
71.2466 46.7651 79.4834 51.7051 89.6265 51.7051 cv
99.7803 51.7051 108.007 46.7651 108.007 40.6812 cv
108.007 22.1748 li
108.007 3.66895 li
108.007 2.2251 107.53 .850098 106.688 -.414063 cv
f
58.7119 55.2056 mo
57.605 55.2056 56.7007 54.3066 56.7007 53.1865 cv
56.7007 52.0718 57.605 51.1675 58.7119 51.1675 cv
59.8237 51.1675 60.73 52.0718 60.73 53.1865 cv
60.73 54.3066 59.8237 55.2056 58.7119 55.2056 cv
58.7119 60.8628 mo
57.605 60.8628 56.7007 59.9565 56.7007 58.8413 cv
56.7007 57.7236 57.605 56.8193 58.7119 56.8193 cv
59.8237 56.8193 60.73 57.7236 60.73 58.8413 cv
60.73 59.9565 59.8237 60.8628 58.7119 60.8628 cv
58.7119 66.6597 mo
57.605 66.6597 56.7007 65.7495 56.7007 64.6323 cv
56.7007 63.5186 57.605 62.6104 58.7119 62.6104 cv
59.8237 62.6104 60.73 63.5186 60.73 64.6323 cv
60.73 65.7495 59.8237 66.6597 58.7119 66.6597 cv
58.7119 72.3115 mo
57.605 72.3115 56.7007 71.4087 56.7007 70.2983 cv
56.7007 69.1733 57.605 68.2725 58.7119 68.2725 cv
59.8237 68.2725 60.73 69.1733 60.73 70.2983 cv
60.73 71.4087 59.8237 72.3115 58.7119 72.3115 cv
58.7119 77.7363 mo
57.605 77.7363 56.7007 76.8296 56.7007 75.7104 cv
56.7007 74.6016 57.605 73.6978 58.7119 73.6978 cv
59.8237 73.6978 60.73 74.6016 60.73 75.7104 cv
60.73 76.8296 59.8237 77.7363 58.7119 77.7363 cv
58.7119 83.3916 mo
57.605 83.3916 56.7007 82.4854 56.7007 81.3765 cv
56.7007 80.2666 57.605 79.3604 58.7119 79.3604 cv
59.8237 79.3604 60.73 80.2666 60.73 81.3765 cv
60.73 82.4854 59.8237 83.3916 58.7119 83.3916 cv
58.7119 89.1836 mo
57.605 89.1836 56.7007 88.2827 56.7007 87.1655 cv
56.7007 86.0537 57.605 85.1514 58.7119 85.1514 cv
59.8237 85.1514 60.73 86.0537 60.73 87.1655 cv
60.73 88.2827 59.8237 89.1836 58.7119 89.1836 cv
52.2881 55.2056 mo
51.189 55.2056 50.2808 54.3066 50.2808 53.1865 cv
50.2808 52.0718 51.189 51.1675 52.2881 51.1675 cv
53.4067 51.1675 54.3101 52.0718 54.3101 53.1865 cv
54.3101 54.3066 53.4067 55.2056 52.2881 55.2056 cv
52.2881 60.8628 mo
51.189 60.8628 50.2808 59.9565 50.2808 58.8413 cv
50.2808 57.7236 51.189 56.8193 52.2881 56.8193 cv
53.4067 56.8193 54.3101 57.7236 54.3101 58.8413 cv
54.3101 59.9565 53.4067 60.8628 52.2881 60.8628 cv
52.2881 66.6597 mo
51.189 66.6597 50.2808 65.7495 50.2808 64.6323 cv
50.2808 63.5186 51.189 62.6104 52.2881 62.6104 cv
53.4067 62.6104 54.3101 63.5186 54.3101 64.6323 cv
54.3101 65.7495 53.4067 66.6597 52.2881 66.6597 cv
52.2881 72.3115 mo
51.189 72.3115 50.2808 71.4087 50.2808 70.2983 cv
50.2808 69.1733 51.189 68.2725 52.2881 68.2725 cv
53.4067 68.2725 54.3101 69.1733 54.3101 70.2983 cv
54.3101 71.4087 53.4067 72.3115 52.2881 72.3115 cv
52.2881 77.7363 mo
51.189 77.7363 50.2808 76.8296 50.2808 75.7104 cv
50.2808 74.6016 51.189 73.6978 52.2881 73.6978 cv
53.4067 73.6978 54.3101 74.6016 54.3101 75.7104 cv
54.3101 76.8296 53.4067 77.7363 52.2881 77.7363 cv
52.2881 83.3916 mo
51.189 83.3916 50.2808 82.4854 50.2808 81.3765 cv
50.2808 80.2666 51.189 79.3604 52.2881 79.3604 cv
53.4067 79.3604 54.3101 80.2666 54.3101 81.3765 cv
54.3101 82.4854 53.4067 83.3916 52.2881 83.3916 cv
52.2881 89.1836 mo
51.189 89.1836 50.2808 88.2827 50.2808 87.1655 cv
50.2808 86.0537 51.189 85.1514 52.2881 85.1514 cv
53.4067 85.1514 54.3101 86.0537 54.3101 87.1655 cv
54.3101 88.2827 53.4067 89.1836 52.2881 89.1836 cv
52.2881 94.8354 mo
51.189 94.8354 50.2808 93.9434 50.2808 92.8276 cv
50.2808 91.7188 51.189 90.8086 52.2881 90.8086 cv
53.4067 90.8086 54.3101 91.7188 54.3101 92.8276 cv
54.3101 93.9434 53.4067 94.8354 52.2881 94.8354 cv
46.0811 55.2056 mo
44.9741 55.2056 44.064 54.3066 44.064 53.1865 cv
44.064 52.0718 44.9741 51.1675 46.0811 51.1675 cv
47.1978 51.1675 48.1079 52.0718 48.1079 53.1865 cv
48.1079 54.3066 47.1978 55.2056 46.0811 55.2056 cv
46.0811 60.8628 mo
44.9741 60.8628 44.064 59.9565 44.064 58.8413 cv
44.064 57.7236 44.9741 56.8193 46.0811 56.8193 cv
47.1978 56.8193 48.1079 57.7236 48.1079 58.8413 cv
48.1079 59.9565 47.1978 60.8628 46.0811 60.8628 cv
46.0811 66.6597 mo
44.9741 66.6597 44.064 65.7495 44.064 64.6323 cv
44.064 63.5186 44.9741 62.6104 46.0811 62.6104 cv
47.1978 62.6104 48.1079 63.5186 48.1079 64.6323 cv
48.1079 65.7495 47.1978 66.6597 46.0811 66.6597 cv
46.0811 72.3115 mo
44.9741 72.3115 44.064 71.4087 44.064 70.2983 cv
44.064 69.1733 44.9741 68.2725 46.0811 68.2725 cv
47.1978 68.2725 48.1079 69.1733 48.1079 70.2983 cv
48.1079 71.4087 47.1978 72.3115 46.0811 72.3115 cv
46.0811 77.7363 mo
44.9741 77.7363 44.064 76.8296 44.064 75.7104 cv
44.064 74.6016 44.9741 73.6978 46.0811 73.6978 cv
47.1978 73.6978 48.1079 74.6016 48.1079 75.7104 cv
48.1079 76.8296 47.1978 77.7363 46.0811 77.7363 cv
46.0811 83.3916 mo
44.9741 83.3916 44.064 82.4854 44.064 81.3765 cv
44.064 80.2666 44.9741 79.3604 46.0811 79.3604 cv
47.1978 79.3604 48.1079 80.2666 48.1079 81.3765 cv
48.1079 82.4854 47.1978 83.3916 46.0811 83.3916 cv
46.0811 89.1836 mo
44.9741 89.1836 44.064 88.2827 44.064 87.1655 cv
44.064 86.0537 44.9741 85.1514 46.0811 85.1514 cv
47.1978 85.1514 48.1079 86.0537 48.1079 87.1655 cv
48.1079 88.2827 47.1978 89.1836 46.0811 89.1836 cv
46.0811 94.8354 mo
44.9741 94.8354 44.064 93.9434 44.064 92.8276 cv
44.064 91.7188 44.9741 90.8086 46.0811 90.8086 cv
47.1978 90.8086 48.1079 91.7188 48.1079 92.8276 cv
48.1079 93.9434 47.1978 94.8354 46.0811 94.8354 cv
39.8267 55.2056 mo
38.707 55.2056 37.8037 54.3066 37.8037 53.1865 cv
37.8037 52.0718 38.707 51.1675 39.8267 51.1675 cv
40.939 51.1675 41.8418 52.0718 41.8418 53.1865 cv
41.8418 54.3066 40.939 55.2056 39.8267 55.2056 cv
39.8267 60.8628 mo
38.707 60.8628 37.8037 59.9565 37.8037 58.8413 cv
37.8037 57.7236 38.707 56.8193 39.8267 56.8193 cv
40.939 56.8193 41.8418 57.7236 41.8418 58.8413 cv
41.8418 59.9565 40.939 60.8628 39.8267 60.8628 cv
39.8267 66.6597 mo
38.707 66.6597 37.8037 65.7495 37.8037 64.6323 cv
37.8037 63.5186 38.707 62.6104 39.8267 62.6104 cv
40.939 62.6104 41.8418 63.5186 41.8418 64.6323 cv
41.8418 65.7495 40.939 66.6597 39.8267 66.6597 cv
39.8267 72.3115 mo
38.707 72.3115 37.8037 71.4087 37.8037 70.2983 cv
37.8037 69.1733 38.707 68.2725 39.8267 68.2725 cv
40.939 68.2725 41.8418 69.1733 41.8418 70.2983 cv
41.8418 71.4087 40.939 72.3115 39.8267 72.3115 cv
39.8267 77.7363 mo
38.707 77.7363 37.8037 76.8296 37.8037 75.7104 cv
37.8037 74.6016 38.707 73.6978 39.8267 73.6978 cv
40.939 73.6978 41.8418 74.6016 41.8418 75.7104 cv
41.8418 76.8296 40.939 77.7363 39.8267 77.7363 cv
39.8267 83.3916 mo
38.707 83.3916 37.8037 82.4854 37.8037 81.3765 cv
37.8037 80.2666 38.707 79.3604 39.8267 79.3604 cv
40.939 79.3604 41.8418 80.2666 41.8418 81.3765 cv
41.8418 82.4854 40.939 83.3916 39.8267 83.3916 cv
39.8267 89.1836 mo
38.707 89.1836 37.8037 88.2827 37.8037 87.1655 cv
37.8037 86.0537 38.707 85.1514 39.8267 85.1514 cv
40.939 85.1514 41.8418 86.0537 41.8418 87.1655 cv
41.8418 88.2827 40.939 89.1836 39.8267 89.1836 cv
39.8267 94.8354 mo
38.707 94.8354 37.8037 93.9434 37.8037 92.8276 cv
37.8037 91.7188 38.707 90.8086 39.8267 90.8086 cv
40.939 90.8086 41.8418 91.7188 41.8418 92.8276 cv
41.8418 93.9434 40.939 94.8354 39.8267 94.8354 cv
33.0068 55.2056 mo
31.8921 55.2056 30.9849 54.3066 30.9849 53.1865 cv
30.9849 52.0718 31.8921 51.1675 33.0068 51.1675 cv
34.1167 51.1675 35.0171 52.0718 35.0171 53.1865 cv
35.0171 54.3066 34.1167 55.2056 33.0068 55.2056 cv
33.0068 60.8628 mo
31.8921 60.8628 30.9849 59.9565 30.9849 58.8413 cv
30.9849 57.7236 31.8921 56.8193 33.0068 56.8193 cv
34.1167 56.8193 35.0171 57.7236 35.0171 58.8413 cv
35.0171 59.9565 34.1167 60.8628 33.0068 60.8628 cv
33.0068 66.6597 mo
31.8921 66.6597 30.9849 65.7495 30.9849 64.6323 cv
30.9849 63.5186 31.8921 62.6104 33.0068 62.6104 cv
34.1167 62.6104 35.0171 63.5186 35.0171 64.6323 cv
35.0171 65.7495 34.1167 66.6597 33.0068 66.6597 cv
33.0068 72.3115 mo
31.8921 72.3115 30.9849 71.4087 30.9849 70.2983 cv
30.9849 69.1733 31.8921 68.2725 33.0068 68.2725 cv
34.1167 68.2725 35.0171 69.1733 35.0171 70.2983 cv
35.0171 71.4087 34.1167 72.3115 33.0068 72.3115 cv
33.0068 77.7363 mo
31.8921 77.7363 30.9849 76.8296 30.9849 75.7104 cv
30.9849 74.6016 31.8921 73.6978 33.0068 73.6978 cv
34.1167 73.6978 35.0171 74.6016 35.0171 75.7104 cv
35.0171 76.8296 34.1167 77.7363 33.0068 77.7363 cv
33.0068 83.3916 mo
31.8921 83.3916 30.9849 82.4854 30.9849 81.3765 cv
30.9849 80.2666 31.8921 79.3604 33.0068 79.3604 cv
34.1167 79.3604 35.0171 80.2666 35.0171 81.3765 cv
35.0171 82.4854 34.1167 83.3916 33.0068 83.3916 cv
33.0068 89.1836 mo
31.8921 89.1836 30.9849 88.2827 30.9849 87.1655 cv
30.9849 86.0537 31.8921 85.1514 33.0068 85.1514 cv
34.1167 85.1514 35.0171 86.0537 35.0171 87.1655 cv
35.0171 88.2827 34.1167 89.1836 33.0068 89.1836 cv
61.603 -.414551 mo
30.9697 -.414551 li
27.9287 3.12256 26.0859 7.7207 26.0859 12.7476 cv
26.0859 46.6514 li
26.0801 46.6514 li
26.0801 80.5483 li
26.0801 91.7104 35.127 100.743 46.2817 100.743 cv
57.4497 100.743 66.4907 91.7104 66.4907 80.5483 cv
66.4907 46.6514 li
66.4907 12.7476 li
66.4907 7.7207 64.6479 3.12256 61.603 -.414551 cv
f
313.019 23.9253 mo
321.009 23.9253 327.499 17.4395 327.499 9.43457 cv
327.499 5.62549 326.017 2.17139 323.613 -.414551 cv
302.416 -.414551 li
300.012 2.17139 298.532 5.62549 298.532 9.43457 cv
298.532 17.4395 305.015 23.9253 313.019 23.9253 cv
f
428.241 21.8433 mo
461.015 21.8433 487.583 12.0962 487.583 .0620117 cv
487.583 -.0976563 487.559 -.255859 487.552 -.414551 cv
368.952 -.414551 li
368.941 -.255859 368.917 -.0976563 368.917 .0620117 cv
368.917 12.0962 395.48 21.8433 428.241 21.8433 cv
f
8.62598 73.5142 mo
5.41113 73.5142 2.43994 74.5361 0 76.2603 cv
0 113.587 li
0 150.912 li
2.43994 152.637 5.41309 153.66 8.62598 153.66 cv
16.8799 153.66 23.5811 146.951 23.5811 138.691 cv
23.5811 113.587 li
23.5811 88.479 li
23.5811 80.2153 16.877 73.5142 8.62598 73.5142 cv
f
51.3682 240.94 mo
22.2354 221.994 li
22.1021 221.883 21.9702 221.795 21.7944 221.711 cv
21.3682 221.488 20.8892 221.353 20.3843 221.353 cv
19.8574 221.353 19.3604 221.488 18.9414 221.711 cv
18.7783 221.795 18.6553 221.883 18.499 221.994 cv
0 234.024 li
0 240.94 li
51.3682 240.94 li
cp
f
11.0439 216.663 mo
11.0439 212.802 6.82666 209.308 0 206.758 cv
0 226.56 li
6.82666 224.01 11.0439 220.514 11.0439 216.663 cv
f
1.30859 174.157 mo
1.30859 176.654 .831543 179.038 -.000488281 181.249 cv
-.000488281 191.084 li
4.02441 186.591 6.47363 180.662 6.47363 174.157 cv
6.47363 167.653 4.02441 161.721 -.000488281 157.227 cv
-.000488281 167.063 li
.831543 169.274 1.30859 171.658 1.30859 174.157 cv
f
17.8203 -.414551 mo
.000488281 -.414551 li
.000488281 29.6514 li
18.0635 29.6514 li
18.0635 30.9014 li
.000488281 30.9014 li
.000488281 66.6104 li
1.7583 67.4033 3.7041 67.8564 5.7583 67.8564 cv
13.5093 67.8564 19.7935 61.5713 19.7935 53.8184 cv
19.7935 30.2734 li
19.7935 6.73047 li
19.7935 4.11865 19.0654 1.68164 17.8203 -.414551 cv
f
490.194 13.8511 mo
490.028 13.7202 489.841 13.5991 489.656 13.5068 cv
489.144 13.228 488.548 13.0723 487.918 13.0723 cv
487.286 13.0723 486.7 13.228 486.19 13.5068 cv
486.005 13.5991 485.828 13.7202 485.663 13.8511 cv
446.489 39.3408 li
446.457 39.355 446.446 39.3608 446.422 39.3711 cv
445.883 39.7148 li
445.866 39.728 445.84 39.748 445.824 39.7612 cv
445.041 40.3901 444.535 41.3281 444.459 42.3999 cv
444.443 42.3999 li
444.443 42.4429 444.45 42.4819 444.45 42.5288 cv
444.45 42.5659 444.443 42.603 444.443 42.6509 cv
444.459 42.6509 li
444.535 43.7119 445.041 44.6538 445.824 45.2813 cv
445.84 45.2949 445.866 45.314 445.883 45.3291 cv
446.422 45.6812 li
446.446 45.687 446.457 45.6973 446.489 45.71 cv
485.663 71.1919 li
485.828 71.3291 486.005 71.4409 486.19 71.5459 cv
486.7 71.8101 487.286 71.9658 487.918 71.9658 cv
488.548 71.9658 489.144 71.8101 489.656 71.5459 cv
489.841 71.4409 490.028 71.3291 490.194 71.1919 cv
510.241 58.1563 li
510.241 26.8921 li
490.194 13.8511 li
cp
f
493.834 85.9185 mo
493.834 120.836 li
493.834 155.757 li
493.834 165.741 500.865 174.077 510.24 176.098 cv
510.24 120.836 li
510.24 65.5825 li
500.865 67.6045 493.834 75.9375 493.834 85.9185 cv
f
507.26 179.887 mo
497.164 179.887 488.972 188.078 488.972 198.173 cv
488.972 208.271 497.164 216.458 507.26 216.458 cv
508.278 216.458 509.269 216.354 510.24 216.194 cv
510.24 180.152 li
509.269 179.992 508.278 179.887 507.26 179.887 cv
f
488.972 236.583 mo
488.972 238.082 489.435 239.537 490.286 240.94 cv
510.241 240.94 li
510.241 220.75 li
497.313 224.399 488.972 230.131 488.972 236.583 cv
f
499.073 -.414551 mo
494.402 -.414551 li
495.552 8.49121 501.868 15.7612 510.24 18.3193 cv
510.24 13.4355 li
504.445 11.1323 500.112 5.90967 499.073 -.414551 cv
f
394.038 62.2651 mo
392.48 62.2651 li
392.48 31.6421 li
394.038 31.6421 li
394.038 62.2651 li
cp
422.561 29.4951 mo
393.262 29.4951 li
363.956 29.4951 li
356.545 29.4951 350.223 34.124 347.689 40.645 cv
391.518 40.645 li
391.518 64.4209 li
393.262 64.4209 li
422.561 64.4209 li
432.205 64.4209 440.026 56.5928 440.026 46.957 cv
440.026 37.3101 432.205 29.4951 422.561 29.4951 cv
f
391.518 113.835 mo
391.518 153.746 li
391.518 193.669 li
399.327 192.746 405.549 175.226 405.549 153.746 cv
405.549 132.27 399.327 114.759 391.518 113.835 cv
f
394.038 89.2729 mo
394.038 84.623 393.092 80.3491 391.516 76.9209 cv
391.516 101.625 li
393.092 98.1968 394.038 93.9238 394.038 89.2729 cv
f
316.089 27.1265 mo
306.667 27.1265 298.537 32.6553 294.758 40.6455 cv
337.418 40.6455 li
333.641 32.6553 325.512 27.1265 316.089 27.1265 cv
f
111.823 76.2007 mo
111.823 82.6265 114.522 88.4194 118.846 92.5195 cv
118.846 59.8784 li
114.522 63.9775 111.823 69.7725 111.823 76.2007 cv
f
118.847 127.853 mo
118.847 109.779 li
114.331 114.832 111.583 121.496 111.583 128.801 cv
111.583 136.115 114.331 142.783 118.847 147.839 cv
118.847 129.756 li
116.833 129.756 li
116.833 127.853 li
118.847 127.853 li
cp
f
121.935 2.35107 mo
116.912 2.35107 112.824 13.4429 112.824 27.126 cv
112.824 37.8633 115.337 47.002 118.847 50.4473 cv
118.847 40.645 li
129.562 40.645 li
130.494 36.7559 131.037 32.1152 131.037 27.126 cv
131.037 13.4429 126.961 2.35107 121.935 2.35107 cv
f
118.847 163.408 mo
113.951 165.434 110.739 168.819 110.739 172.66 cv
110.739 191.519 li
110.739 210.384 li
110.739 216.587 119.122 221.625 129.47 221.625 cv
139.817 221.625 148.199 216.587 148.199 210.384 cv
148.199 199.762 li
118.847 199.762 li
118.847 163.408 li
cp
f
212.056 218.236 mo
212.232 218.389 212.429 218.513 212.624 218.624 cv
213.188 218.917 213.824 219.079 214.506 219.079 cv
215.194 219.079 215.843 218.917 216.392 218.624 cv
216.599 218.513 216.8 218.389 216.979 218.236 cv
245.392 199.762 li
183.654 199.762 li
212.056 218.236 li
cp
f
332.218 234.58 mo
330.436 234.58 li
330.436 199.762 li
304.486 199.762 li
301.229 203.358 299.073 209.516 299.073 216.51 cv
299.073 227.607 304.473 236.588 311.107 236.588 cv
331.324 236.588 li
351.54 236.588 li
358.191 236.588 363.585 227.607 363.585 216.51 cv
363.585 209.516 361.433 203.358 358.172 199.762 cv
332.218 199.762 li
332.218 234.58 li
cp
f
149.979 219.429 mo
149.979 230.418 158.895 239.32 169.877 239.32 cv
180.86 239.32 189.767 230.418 189.767 219.429 cv
189.767 209.409 182.348 201.14 172.709 199.762 cv
167.045 199.762 li
157.407 201.14 149.979 209.409 149.979 219.429 cv
f
278.262 201.068 mo
269.574 201.068 262.526 208.116 262.526 216.81 cv
262.526 240.94 li
294.004 240.94 li
294.004 216.81 li
294.004 208.116 286.963 201.068 278.262 201.068 cv
f
292.827 12.5366 mo
292.827 8.04883 292.598 3.7085 292.176 -.414551 cv
258.04 -.414551 li
257.618 3.7085 257.389 8.04883 257.389 12.5366 cv
257.389 23.0288 258.623 32.7295 260.711 40.6445 cv
289.505 40.6445 li
291.593 32.7295 292.827 23.0288 292.827 12.5366 cv
f
192.183 -.414551 mo
192.183 12.5366 li
192.183 33.0933 li
192.183 35.9424 193.167 38.5625 194.804 40.6455 cv
214.062 40.6455 li
215.697 38.5625 216.68 35.9424 216.68 33.0933 cv
216.68 12.5366 li
216.68 -.414551 li
192.183 -.414551 li
cp
f
224.263 22.9038 mo
250.542 22.9038 li
250.542 24.4331 li
224.263 24.4331 li
224.263 22.9038 li
cp
244.251 -.414063 mo
230.558 -.414063 li
225.103 3.84082 221.323 13.0229 221.323 23.6709 cv
221.323 30.125 222.711 36.0391 225.017 40.645 cv
249.789 40.645 li
252.095 36.0391 253.48 30.125 253.48 23.6709 cv
253.48 13.0229 249.706 3.84082 244.251 -.414063 cv
f
138.509 6.25879 mo
182.755 6.25879 li
182.755 8.50684 li
138.509 8.50684 li
138.509 6.25879 li
cp
185.769 31.873 mo
185.769 6.55371 li
185.769 -.414063 li
135.495 -.414063 li
135.495 6.55371 li
135.495 31.873 li
135.495 35.146 137.237 38.1729 140.188 40.645 cv
181.073 40.645 li
184.025 38.1729 185.769 35.146 185.769 31.873 cv
f
167.046 199.762 mo
172.71 199.762 li
171.782 199.629 170.842 199.538 169.878 199.538 cv
168.914 199.538 167.974 199.629 167.046 199.762 cv
f
151.922 83.6479 mo
151.922 83.105 151.609 82.7939 151.065 82.7939 cv
149.426 82.7939 li
149.426 80.4897 li
152.156 80.4897 li
153.793 80.4897 154.535 81.1948 154.535 82.6729 cv
154.535 83.5737 li
154.535 84.3511 154.459 84.9741 154.459 84.9741 cv
154.535 84.9741 li
155.51 82.3262 158.592 80.021 161.633 80.021 cv
165.262 80.021 167.133 81.6987 167.717 84.9351 cv
167.795 84.9351 li
168.848 82.2827 171.695 80.021 175.01 80.021 cv
179.768 80.021 181.522 82.7939 181.522 87.627 cv
181.522 96.9468 li
181.522 97.5352 181.836 97.8081 182.381 97.8081 cv
184.018 97.8081 li
184.018 100.105 li
181.25 100.105 li
179.574 100.105 178.869 99.4058 178.869 97.7261 cv
178.869 88.291 li
178.869 85.0947 178.207 82.437 174.619 82.437 cv
171.656 82.437 169.199 85.0947 168.418 87.98 cv
168.147 88.8369 168.067 89.7729 168.067 90.8237 cv
168.067 100.105 li
165.416 100.105 li
165.416 88.291 li
165.416 85.3262 164.988 82.437 161.281 82.437 cv
158.084 82.437 155.705 85.2109 154.887 88.2119 cv
154.652 89.0327 154.574 89.9287 154.574 90.8237 cv
154.574 100.105 li
151.922 100.105 li
151.922 83.6479 li
cp
f
188 83.6479 mo
188 83.105 187.687 82.7939 187.143 82.7939 cv
185.506 82.7939 li
185.506 80.4897 li
188.236 80.4897 li
189.873 80.4897 190.613 81.1538 190.613 82.7119 cv
190.613 84.041 li
190.613 84.8589 190.535 85.521 190.535 85.521 cv
190.613 85.521 li
191.549 82.5581 193.732 80.2939 196.814 80.2939 cv
197.361 80.2939 197.867 80.4141 197.867 80.4141 cv
197.867 83.0288 li
197.867 83.0288 197.402 82.9448 196.893 82.9448 cv
194.123 82.9448 192.055 85.1299 191.199 88.019 cv
190.809 89.2651 190.652 90.5908 190.652 91.8389 cv
190.652 100.105 li
188 100.105 li
188 83.6479 li
cp
f
202.16 83.6479 mo
202.16 83.105 201.847 82.7939 201.301 82.7939 cv
199.664 82.7939 li
199.664 80.4897 li
202.392 80.4897 li
204.031 80.4897 204.771 81.1948 204.771 82.6729 cv
204.771 83.5737 li
204.771 84.3511 204.695 84.9741 204.695 84.9741 cv
204.771 84.9741 li
205.744 82.3262 208.83 80.021 211.871 80.021 cv
215.5 80.021 217.371 81.6987 217.955 84.9351 cv
218.031 84.9351 li
219.086 82.2827 221.933 80.021 225.246 80.021 cv
230.006 80.021 231.762 82.7939 231.762 87.627 cv
231.762 96.9468 li
231.762 97.5352 232.072 97.8081 232.619 97.8081 cv
234.256 97.8081 li
234.256 100.105 li
231.486 100.105 li
229.81 100.105 229.109 99.4058 229.109 97.7261 cv
229.109 88.291 li
229.109 85.0947 228.445 82.437 224.857 82.437 cv
221.894 82.437 219.437 85.0947 218.656 87.98 cv
218.385 88.8369 218.306 89.7729 218.306 90.8237 cv
218.306 100.105 li
215.654 100.105 li
215.654 88.291 li
215.654 85.3262 215.226 82.437 211.519 82.437 cv
208.322 82.437 205.941 85.2109 205.123 88.2119 cv
204.889 89.0327 204.812 89.9287 204.812 90.8237 cv
204.812 100.105 li
202.16 100.105 li
202.16 83.6479 li
cp
f
246.742 80.021 mo
248.965 80.021 253.722 80.96 253.722 84.1948 cv
253.722 85.9512 li
251.224 85.9512 li
251.224 84.8198 li
251.224 83.1831 248.379 82.4019 246.742 82.4019 cv
242.531 82.4019 239.138 85.5601 239.138 90.3159 cv
239.138 95.1519 242.687 98.1582 246.818 98.1582 cv
250.838 98.1582 253.138 95.3882 253.138 95.3882 cv
254.387 97.3779 li
254.387 97.3779 251.734 100.574 246.701 100.574 cv
240.853 100.574 236.408 96.3999 236.408 90.3159 cv
236.408 84.312 240.892 80.021 246.742 80.021 cv
f
272.129 90.2808 mo
272.129 86.3008 270.102 82.4019 265.889 82.4019 cv
262.417 82.4019 259.57 85.3257 259.57 90.2808 cv
259.57 95.1147 262.108 98.1948 265.772 98.1948 cv
269.049 98.1948 272.129 95.8569 272.129 90.2808 cv
265.656 80.021 mo
270.412 80.021 272.051 83.6865 272.051 83.6865 cv
272.129 83.6865 li
272.129 83.6865 272.051 83.0249 272.051 82.2046 cv
272.051 75.8467 li
272.051 75.3037 271.74 74.9917 271.197 74.9917 cv
269.555 74.9917 li
269.555 72.689 li
272.326 72.689 li
274.001 72.689 274.703 73.3916 274.703 75.0679 cv
274.703 96.9468 li
274.703 97.5308 275.016 97.8076 275.561 97.8076 cv
277.201 97.8076 li
277.201 100.105 li
274.473 100.105 li
272.833 100.105 272.129 99.3647 272.129 97.9219 cv
272.129 97.1826 272.208 96.6719 272.208 96.6719 cv
272.129 96.6719 li
272.129 96.6719 270.531 100.574 265.383 100.574 cv
260.117 100.574 256.842 96.3608 256.842 90.2808 cv
256.842 84.0796 260.506 80.021 265.656 80.021 cv
f
294.051 79.9429 mo
294.051 77.0171 291.908 74.7969 288.436 74.7969 cv
285.705 74.7969 283.563 76.1987 283.563 77.7588 cv
283.563 79.0479 li
280.987 79.0479 li
280.987 77.0171 li
280.987 73.5469 285.705 72.2236 288.518 72.2236 cv
293.739 72.2236 296.858 75.6538 296.858 79.9058 cv
296.858 89.541 282.352 89.3037 282.352 96.9077 cv
282.352 97.4526 282.664 97.6909 283.25 97.6909 cv
294.714 97.6909 li
295.262 97.6909 295.573 97.416 295.573 96.832 cv
295.573 95 li
298.106 95 li
298.106 97.73 li
298.106 99.4058 297.405 100.105 295.731 100.105 cv
282.001 100.105 li
280.128 100.105 279.542 99.3276 279.542 97.416 cv
279.542 87.2397 294.051 88.0537 294.051 79.9429 cv
f
317.883 86.3784 mo
317.883 79.8643 316.399 74.7573 311.21 74.7573 cv
306.024 74.7573 304.542 79.8643 304.542 86.3784 cv
304.542 92.9297 306.024 98.0405 311.21 98.0405 cv
316.399 98.0405 317.883 92.9297 317.883 86.3784 cv
301.774 86.3784 mo
301.774 78.5015 304.074 72.2246 311.21 72.2246 cv
318.348 72.2246 320.69 78.5015 320.69 86.3784 cv
320.69 94.3354 318.348 100.573 311.21 100.573 cv
304.074 100.573 301.774 94.3354 301.774 86.3784 cv
f
324.631 97.6909 mo
330.753 97.6909 li
330.753 77.564 li
330.753 76.7852 330.794 76.043 330.794 76.043 cv
330.708 76.043 li
330.708 76.043 330.444 76.6279 329.348 77.6792 cv
326.424 80.605 li
324.705 78.853 li
330.91 72.689 li
333.481 72.689 li
333.481 97.6909 li
339.489 97.6909 li
339.489 100.105 li
324.631 100.105 li
324.631 97.6909 li
cp
f
351.577 98.0405 mo
355.279 98.0405 357.467 95.2295 357.467 91.4487 cv
357.467 87.6265 355.008 85.1304 351.265 85.1304 cv
347.601 85.1304 344.635 87.5874 344.635 89.8115 cv
344.635 93.4365 347.484 98.0405 351.577 98.0405 cv
341.708 88.0547 mo
341.708 81.0737 345.297 72.2246 353.762 72.2246 cv
356.765 72.2246 358.792 73.3516 358.792 73.3516 cv
357.777 75.7314 li
357.777 75.7314 356.06 74.7573 353.797 74.7573 cv
348.066 74.7573 345.142 80.4897 344.635 86.0283 cv
344.713 86.0283 li
345.999 83.8848 348.846 82.7124 351.691 82.7124 cv
356.685 82.7124 360.232 86.3008 360.232 91.4097 cv
360.232 97.1025 356.417 100.574 351.615 100.574 cv
345.646 100.574 341.708 95.2295 341.708 88.0547 cv
f
160.604 124.47 mo
160.604 121.847 159.27 119.279 156.493 119.279 cv
154.206 119.279 152.331 121.203 152.331 124.47 cv
152.331 127.654 154.001 129.681 156.416 129.681 cv
158.577 129.681 160.604 128.144 160.604 124.47 cv
156.337 117.71 mo
159.475 117.71 160.552 120.126 160.552 120.126 cv
160.604 120.126 li
160.604 120.126 160.552 119.689 160.552 119.15 cv
160.552 114.96 li
160.552 114.599 160.348 114.394 159.986 114.394 cv
158.909 114.394 li
158.909 112.878 li
160.732 112.878 li
161.839 112.878 162.3 113.343 162.3 114.447 cv
162.3 128.861 li
162.3 129.248 162.505 129.425 162.868 129.425 cv
163.945 129.425 li
163.945 130.945 li
162.146 130.945 li
161.068 130.945 160.604 130.453 160.604 129.505 cv
160.604 129.017 160.657 128.685 160.657 128.685 cv
160.604 128.685 li
160.604 128.685 159.55 131.25 156.159 131.25 cv
152.689 131.25 150.532 128.476 150.532 124.47 cv
150.532 120.382 152.947 117.71 156.337 117.71 cv
f
167.26 112.878 mo
168.955 112.878 li
168.955 115.091 li
167.26 115.091 li
167.26 112.878 li
cp
167.311 120.099 mo
167.311 119.742 167.105 119.533 166.746 119.533 cv
165.666 119.533 li
165.666 118.017 li
167.49 118.017 li
168.596 118.017 169.059 118.482 169.059 119.586 cv
169.059 128.861 li
169.059 129.248 169.262 129.425 169.625 129.425 cv
170.703 129.425 li
170.703 130.945 li
168.877 130.945 li
167.773 130.945 167.311 130.482 167.311 129.375 cv
167.311 120.099 li
cp
f
177.486 129.761 mo
179.951 129.761 181.443 127.193 181.443 124.957 cv
181.443 124.367 li
180.697 124.367 li
178.668 124.367 174.607 124.416 174.607 127.324 cv
174.607 128.529 175.558 129.761 177.486 129.761 cv
180.722 122.978 mo
181.443 122.978 li
181.443 122.824 li
181.443 120.126 180.466 119.173 178.104 119.173 cv
177.459 119.173 175.586 119.355 175.586 120.306 cv
175.586 121.126 li
173.914 121.126 li
173.914 119.892 li
173.914 118.097 176.999 117.71 178.129 117.71 cv
182.215 117.71 183.189 119.892 183.189 122.667 cv
183.189 128.861 li
183.189 129.248 183.396 129.425 183.756 129.425 cv
184.834 129.425 li
184.834 130.945 li
183.063 130.945 li
181.958 130.945 181.519 130.453 181.519 129.402 cv
181.519 128.837 181.545 128.451 181.545 128.451 cv
181.494 128.451 li
181.519 128.451 180.441 131.25 177.203 131.25 cv
175.045 131.25 172.808 129.994 172.808 127.423 cv
172.808 123.132 178.488 122.978 180.722 122.978 cv
f
196.705 124.24 mo
196.705 120.461 194.908 119.302 192.621 119.302 cv
190.103 119.302 188.639 121.13 188.639 124.21 cv
188.639 127.292 190.309 129.3 192.851 129.3 cv
194.908 129.3 196.705 128.041 196.705 124.24 cv
192.441 117.711 mo
195.91 117.711 196.73 119.922 196.73 119.922 cv
196.783 119.922 li
196.783 119.431 li
196.783 118.508 197.197 118.017 198.25 118.017 cv
200.049 118.017 li
200.049 119.533 li
198.994 119.533 li
198.637 119.533 198.43 119.713 198.43 120.099 cv
198.43 130.634 li
198.43 134.748 195.396 136.339 192.211 136.339 cv
190.746 136.339 189.254 135.949 187.996 135.312 cv
188.662 133.845 li
188.662 133.845 190.256 134.748 192.156 134.748 cv
194.676 134.748 196.682 133.564 196.682 130.683 cv
196.682 129.556 li
196.682 129.068 196.705 128.63 196.705 128.63 cv
196.654 128.63 li
195.883 130.046 194.6 130.867 192.594 130.867 cv
189.127 130.867 186.84 128.115 186.84 124.24 cv
186.84 120.359 188.973 117.711 192.441 117.711 cv
f
203.262 120.099 mo
203.262 119.742 203.055 119.535 202.696 119.535 cv
201.617 119.535 li
201.617 118.017 li
203.414 118.017 li
204.496 118.017 204.983 118.482 204.983 119.454 cv
204.983 120.048 li
204.983 120.562 204.932 120.974 204.932 120.974 cv
204.983 120.974 li
205.446 119.794 207.09 117.71 210.125 117.71 cv
213.335 117.71 214.465 119.535 214.465 122.722 cv
214.465 128.861 li
214.465 129.248 214.672 129.425 215.032 129.425 cv
216.11 129.425 li
216.11 130.945 li
214.287 130.945 li
213.18 130.945 212.719 130.482 212.719 129.375 cv
212.719 123.183 li
212.719 121.15 212.41 119.359 209.917 119.359 cv
207.708 119.359 205.807 120.87 205.215 123.003 cv
205.061 123.542 205.008 124.134 205.008 124.75 cv
205.008 130.945 li
203.262 130.945 li
203.262 120.099 li
cp
f
224.896 129.681 mo
227.648 129.681 229.909 127.423 229.909 124.416 cv
229.909 121.49 227.648 119.302 224.896 119.302 cv
222.124 119.302 219.861 121.49 219.861 124.416 cv
219.861 127.423 222.124 129.681 224.896 129.681 cv
224.874 117.71 mo
228.65 117.71 231.708 120.585 231.708 124.416 cv
231.708 128.32 228.65 131.253 224.896 131.253 cv
221.122 131.253 218.063 128.32 218.063 124.416 cv
218.063 120.585 221.122 117.71 224.874 117.71 cv
f
234.871 127.783 mo
234.871 127.783 236.309 129.736 238.853 129.736 cv
240.293 129.736 241.574 129.041 241.574 127.679 cv
241.574 124.851 234.328 125.365 234.328 121.203 cv
234.328 118.869 236.336 117.711 238.93 117.711 cv
240.238 117.711 242.861 118.224 242.861 120.049 cv
242.861 121.15 li
241.215 121.15 li
241.215 120.537 li
241.215 119.586 239.828 119.224 238.98 119.224 cv
237.182 119.224 236.101 119.845 236.101 121.101 cv
236.101 124.003 243.351 123.337 243.351 127.628 cv
243.351 129.785 241.398 131.25 238.826 131.25 cv
235.461 131.25 233.869 128.988 233.869 128.988 cv
234.871 127.783 li
cp
f
255.834 123.156 mo
255.732 120.486 254.087 119.174 252.188 119.174 cv
250.056 119.174 248.175 120.562 247.74 123.156 cv
255.834 123.156 li
cp
252.212 117.711 mo
255.785 117.711 257.635 120.461 257.635 123.669 cv
257.635 123.98 257.582 124.544 257.582 124.544 cv
247.667 124.544 li
247.716 127.81 250.003 129.681 252.673 129.681 cv
255.04 129.681 256.557 128.089 256.557 128.089 cv
257.404 129.402 li
257.404 129.402 255.526 131.25 252.601 131.25 cv
248.771 131.25 245.839 128.476 245.839 124.494 cv
245.839 120.256 248.745 117.711 252.212 117.711 cv
f
261.928 128.886 mo
263.905 128.886 li
263.905 130.943 li
261.928 130.943 li
261.928 128.886 li
cp
261.928 118.017 mo
263.905 118.017 li
263.905 120.076 li
261.928 120.076 li
261.928 118.017 li
cp
f
276.471 114.96 mo
276.471 114.6 276.266 114.395 275.905 114.395 cv
274.825 114.395 li
274.825 112.878 li
276.653 112.878 li
277.753 112.878 278.216 113.266 278.216 114.369 cv
278.216 122.951 li
279.555 122.951 li
280.042 122.951 280.659 122.794 281.016 122.335 cv
284.332 118.018 li
286.464 118.018 li
282.739 122.742 li
282.098 123.542 281.766 123.669 281.766 123.669 cv
281.766 123.722 li
281.766 123.722 282.149 123.904 282.559 124.673 cv
284.899 128.861 li
285.128 129.298 285.386 129.425 286.083 129.425 cv
286.776 129.425 li
286.776 130.945 li
285.567 130.945 li
284.282 130.945 283.921 130.738 283.332 129.658 cv
280.761 125.033 li
280.479 124.519 279.862 124.47 279.403 124.47 cv
278.216 124.47 li
278.216 130.945 li
276.471 130.945 li
276.471 114.96 li
cp
f
289.725 120.099 mo
289.725 119.742 289.524 119.535 289.163 119.535 cv
288.085 119.535 li
288.085 118.017 li
289.884 118.017 li
290.96 118.017 291.45 118.454 291.45 119.482 cv
291.45 120.357 li
291.45 120.898 291.399 121.333 291.399 121.333 cv
291.45 121.333 li
292.065 119.38 293.505 117.89 295.538 117.89 cv
295.897 117.89 296.227 117.966 296.227 117.966 cv
296.227 119.689 li
296.227 119.689 295.921 119.634 295.585 119.634 cv
293.763 119.634 292.405 121.076 291.833 122.978 cv
291.579 123.798 291.477 124.673 291.477 125.496 cv
291.477 130.945 li
289.725 130.945 li
289.725 120.099 li
cp
f
299.492 112.878 mo
301.189 112.878 li
301.189 115.091 li
299.492 115.091 li
299.492 112.878 li
cp
299.545 120.099 mo
299.545 119.742 299.34 119.533 298.982 119.533 cv
297.9 119.533 li
297.9 118.017 li
299.723 118.017 li
300.83 118.017 301.293 118.482 301.293 119.586 cv
301.293 128.861 li
301.293 129.248 301.5 129.425 301.857 129.425 cv
302.936 129.425 li
302.936 130.945 li
301.113 130.945 li
300.008 130.945 299.545 130.482 299.545 129.375 cv
299.545 120.099 li
cp
f
306.409 119.482 mo
304.713 119.482 li
304.713 118.017 li
306.43 118.017 li
306.43 114.447 li
308.152 114.447 li
308.152 118.017 li
311.392 118.017 li
311.392 119.482 li
308.152 119.482 li
308.152 126.062 li
308.152 129.091 310.084 129.478 311.055 129.478 cv
311.417 129.478 311.646 129.425 311.646 129.425 cv
311.646 130.996 li
311.646 130.996 311.344 131.046 310.904 131.046 cv
309.409 131.046 306.409 130.556 306.409 126.24 cv
306.409 119.482 li
cp
f
315.326 112.878 mo
317.017 112.878 li
317.017 115.091 li
315.326 115.091 li
315.326 112.878 li
cp
315.373 120.099 mo
315.373 119.742 315.164 119.533 314.809 119.533 cv
313.729 119.533 li
313.729 118.017 li
315.553 118.017 li
316.66 118.017 317.121 118.482 317.121 119.586 cv
317.121 128.861 li
317.121 129.248 317.328 129.425 317.686 129.425 cv
318.766 129.425 li
318.766 130.945 li
316.939 130.945 li
315.838 130.945 315.373 130.482 315.373 129.375 cv
315.373 120.099 li
cp
f
321.594 127.783 mo
321.594 127.783 323.032 129.736 325.578 129.736 cv
327.016 129.736 328.303 129.041 328.303 127.679 cv
328.303 124.851 321.055 125.365 321.055 121.203 cv
321.055 118.869 323.059 117.711 325.653 117.711 cv
326.964 117.711 329.585 118.224 329.585 120.049 cv
329.585 121.15 li
327.942 121.15 li
327.942 120.537 li
327.942 119.586 326.551 119.224 325.705 119.224 cv
323.905 119.224 322.823 119.845 322.823 121.101 cv
322.823 124.003 330.073 123.337 330.073 127.628 cv
330.073 129.785 328.121 131.25 325.548 131.25 cv
322.182 131.25 320.594 128.988 320.594 128.988 cv
321.594 127.783 li
cp
f
339.377 117.71 mo
340.844 117.71 343.975 118.328 343.975 120.46 cv
343.975 121.617 li
342.33 121.617 li
342.33 120.871 li
342.33 119.794 340.457 119.278 339.377 119.278 cv
336.602 119.278 334.367 121.359 334.367 124.494 cv
334.367 127.679 336.701 129.658 339.426 129.658 cv
342.076 129.658 343.59 127.833 343.59 127.833 cv
344.414 129.144 li
344.414 129.144 342.668 131.25 339.352 131.25 cv
335.5 131.25 332.565 128.501 332.565 124.494 cv
332.565 120.537 335.522 117.71 339.377 117.71 cv
f
347.574 114.96 mo
347.574 114.6 347.372 114.395 347.008 114.395 cv
345.928 114.395 li
345.928 112.878 li
347.758 112.878 li
348.859 112.878 349.32 113.343 349.32 114.395 cv
349.32 119.869 li
349.32 120.46 349.269 120.919 349.269 120.919 cv
349.32 120.919 li
349.808 119.689 351.536 117.71 354.439 117.71 cv
357.648 117.71 358.781 119.532 358.781 122.722 cv
358.781 128.861 li
358.781 129.248 358.982 129.425 359.344 129.425 cv
360.424 129.425 li
360.424 130.945 li
358.596 130.945 li
357.495 130.945 357.031 130.482 357.031 129.375 cv
357.031 123.183 li
357.031 121.15 356.721 119.355 354.208 119.355 cv
352.019 119.355 350.12 120.871 349.529 123.029 cv
349.377 123.542 349.32 124.134 349.32 124.75 cv
349.32 130.945 li
347.574 130.945 li
347.574 114.96 li
cp
f
178.996 158.148 mo
178.874 157.782 178.651 157.681 178.286 157.681 cv
178.022 157.681 li
178.022 156.484 li
178.732 156.484 li
179.706 156.484 180.03 156.667 180.334 157.62 cv
182.422 164.087 li
182.584 164.574 182.725 165.182 182.725 165.182 cv
182.767 165.182 li
182.767 165.182 182.929 164.574 183.091 164.087 cv
185.584 156.526 li
186.963 156.526 li
189.457 164.087 li
189.619 164.574 189.781 165.182 189.781 165.182 cv
189.822 165.182 li
189.822 165.182 189.944 164.594 190.106 164.087 cv
192.214 157.62 li
192.518 156.667 192.843 156.484 193.816 156.484 cv
194.525 156.484 li
194.525 157.681 li
194.242 157.681 li
193.897 157.681 193.654 157.782 193.531 158.148 cv
190.612 166.682 li
189.093 166.682 li
186.599 159.424 li
186.436 158.917 186.294 158.33 186.294 158.33 cv
186.253 158.33 li
186.253 158.33 186.112 158.917 185.929 159.424 cv
183.456 166.682 li
181.915 166.682 li
178.996 158.148 li
cp
f
195.907 158.148 mo
195.785 157.782 195.562 157.681 195.196 157.681 cv
194.933 157.681 li
194.933 156.484 li
195.643 156.484 li
196.617 156.484 196.941 156.667 197.245 157.62 cv
199.333 164.087 li
199.495 164.574 199.637 165.182 199.637 165.182 cv
199.678 165.182 li
199.678 165.182 199.84 164.574 200.003 164.087 cv
202.496 156.526 li
203.875 156.526 li
206.368 164.087 li
206.53 164.574 206.692 165.182 206.692 165.182 cv
206.733 165.182 li
206.733 165.182 206.854 164.594 207.016 164.087 cv
209.126 157.62 li
209.429 156.667 209.755 156.484 210.727 156.484 cv
211.436 156.484 li
211.436 157.681 li
211.153 157.681 li
210.808 157.681 210.565 157.782 210.442 158.148 cv
207.523 166.682 li
206.004 166.682 li
203.51 159.424 li
203.347 158.917 203.205 158.33 203.205 158.33 cv
203.165 158.33 li
203.165 158.33 203.024 158.917 202.841 159.424 cv
200.367 166.682 li
198.826 166.682 li
195.907 158.148 li
cp
f
212.818 158.148 mo
212.696 157.782 212.475 157.681 212.108 157.681 cv
211.845 157.681 li
211.845 156.484 li
212.555 156.484 li
213.528 156.484 213.854 156.667 214.156 157.62 cv
216.245 164.087 li
216.406 164.574 216.548 165.182 216.548 165.182 cv
216.589 165.182 li
216.589 165.182 216.752 164.574 216.915 164.087 cv
219.407 156.526 li
220.786 156.526 li
223.279 164.087 li
223.441 164.574 223.604 165.182 223.604 165.182 cv
223.645 165.182 li
223.645 165.182 223.766 164.594 223.928 164.087 cv
226.038 157.62 li
226.341 156.667 226.667 156.484 227.639 156.484 cv
228.347 156.484 li
228.347 157.681 li
228.064 157.681 li
227.72 157.681 227.477 157.782 227.354 158.148 cv
224.436 166.682 li
222.916 166.682 li
220.421 159.424 li
220.258 158.917 220.117 158.33 220.117 158.33 cv
220.076 158.33 li
220.076 158.33 219.935 158.917 219.752 159.424 cv
217.278 166.682 li
215.738 166.682 li
212.818 158.148 li
cp
f
229.143 165.061 mo
230.704 165.061 li
230.704 166.682 li
229.143 166.682 li
229.143 165.061 li
cp
f
233.866 158.126 mo
233.866 157.843 233.704 157.681 233.42 157.681 cv
232.569 157.681 li
232.569 156.484 li
233.987 156.484 li
234.84 156.484 235.224 156.85 235.224 157.62 cv
235.224 158.085 li
235.224 158.492 235.184 158.816 235.184 158.816 cv
235.224 158.816 li
235.731 157.437 237.333 156.241 238.914 156.241 cv
240.799 156.241 241.772 157.113 242.077 158.796 cv
242.117 158.796 li
242.665 157.417 244.145 156.241 245.869 156.241 cv
248.341 156.241 249.254 157.681 249.254 160.195 cv
249.254 165.041 li
249.254 165.344 249.416 165.486 249.7 165.486 cv
250.552 165.486 li
250.552 166.682 li
249.112 166.682 li
248.24 166.682 247.875 166.318 247.875 165.446 cv
247.875 160.539 li
247.875 158.877 247.53 157.5 245.665 157.5 cv
244.124 157.5 242.847 158.877 242.441 160.376 cv
242.301 160.824 242.259 161.31 242.259 161.857 cv
242.259 166.682 li
240.88 166.682 li
240.88 160.539 li
240.88 158.999 240.657 157.5 238.732 157.5 cv
237.069 157.5 235.833 158.938 235.407 160.5 cv
235.284 160.925 235.245 161.391 235.245 161.857 cv
235.245 166.682 li
233.866 166.682 li
233.866 158.126 li
cp
f
252.745 158.126 mo
252.745 157.843 252.583 157.681 252.298 157.681 cv
251.447 157.681 li
251.447 156.484 li
252.865 156.484 li
253.719 156.484 254.102 156.83 254.102 157.64 cv
254.102 158.33 li
254.102 158.755 254.061 159.1 254.061 159.1 cv
254.102 159.1 li
254.589 157.559 255.724 156.383 257.325 156.383 cv
257.61 156.383 257.875 156.445 257.875 156.445 cv
257.875 157.802 li
257.875 157.802 257.631 157.761 257.367 157.761 cv
255.928 157.761 254.853 158.897 254.406 160.397 cv
254.205 161.046 254.124 161.736 254.124 162.384 cv
254.124 166.682 li
252.745 166.682 li
252.745 158.126 li
cp
f
260.227 158.126 mo
260.227 157.843 260.065 157.681 259.78 157.681 cv
258.928 157.681 li
258.928 156.484 li
260.346 156.484 li
261.201 156.484 261.583 156.85 261.583 157.62 cv
261.583 158.085 li
261.583 158.492 261.543 158.816 261.543 158.816 cv
261.583 158.816 li
262.091 157.437 263.694 156.241 265.275 156.241 cv
267.16 156.241 268.132 157.113 268.438 158.796 cv
268.478 158.796 li
269.025 157.417 270.504 156.241 272.229 156.241 cv
274.702 156.241 275.615 157.681 275.615 160.195 cv
275.615 165.041 li
275.615 165.344 275.777 165.486 276.059 165.486 cv
276.913 165.486 li
276.913 166.682 li
275.472 166.682 li
274.6 166.682 274.236 166.318 274.236 165.446 cv
274.236 160.539 li
274.236 158.877 273.889 157.5 272.026 157.5 cv
270.485 157.5 269.208 158.877 268.801 160.376 cv
268.661 160.824 268.62 161.31 268.62 161.857 cv
268.62 166.682 li
267.241 166.682 li
267.241 160.539 li
267.241 158.999 267.018 157.5 265.092 157.5 cv
263.428 157.5 262.193 158.938 261.768 160.5 cv
261.645 160.925 261.606 161.391 261.606 161.857 cv
261.606 166.682 li
260.227 166.682 li
260.227 158.126 li
cp
f
283.523 156.241 mo
284.679 156.241 287.154 156.727 287.154 158.411 cv
287.154 159.323 li
285.855 159.323 li
285.855 158.735 li
285.855 157.883 284.376 157.477 283.523 157.477 cv
281.334 157.477 279.571 159.121 279.571 161.593 cv
279.571 164.108 281.416 165.669 283.565 165.669 cv
285.654 165.669 286.848 164.229 286.848 164.229 cv
287.498 165.263 li
287.498 165.263 286.12 166.925 283.502 166.925 cv
280.461 166.925 278.152 164.756 278.152 161.593 cv
278.152 158.472 280.483 156.241 283.523 156.241 cv
f
296.846 161.574 mo
296.846 159.505 295.792 157.477 293.603 157.477 cv
291.797 157.477 290.319 158.999 290.319 161.574 cv
290.319 164.087 291.635 165.689 293.542 165.689 cv
295.245 165.689 296.846 164.473 296.846 161.574 cv
293.481 156.241 mo
295.954 156.241 296.806 158.148 296.806 158.148 cv
296.846 158.148 li
296.846 158.148 296.806 157.803 296.806 157.375 cv
296.806 154.072 li
296.806 153.788 296.644 153.625 296.36 153.625 cv
295.507 153.625 li
295.507 152.429 li
296.949 152.429 li
297.82 152.429 298.185 152.795 298.185 153.667 cv
298.185 165.041 li
298.185 165.345 298.346 165.486 298.629 165.486 cv
299.483 165.486 li
299.483 166.682 li
298.063 166.682 li
297.21 166.682 296.846 166.296 296.846 165.547 cv
296.846 165.161 296.886 164.899 296.886 164.899 cv
296.846 164.899 li
296.846 164.899 296.015 166.925 293.338 166.925 cv
290.602 166.925 288.899 164.736 288.899 161.574 cv
288.899 158.35 290.803 156.241 293.481 156.241 cv
f
301.368 165.061 mo
302.931 165.061 li
302.931 166.682 li
301.368 166.682 li
301.368 165.061 li
cp
f
306.093 158.126 mo
306.093 157.843 305.931 157.681 305.649 157.681 cv
304.794 157.681 li
304.794 156.484 li
306.215 156.484 li
307.067 156.484 307.452 156.85 307.452 157.62 cv
307.452 158.085 li
307.452 158.492 307.411 158.816 307.411 158.816 cv
307.452 158.816 li
307.818 157.883 309.115 156.241 311.506 156.241 cv
314.04 156.241 314.933 157.681 314.933 160.195 cv
314.933 165.041 li
314.933 165.344 315.095 165.486 315.379 165.486 cv
316.231 165.486 li
316.231 166.682 li
314.791 166.682 li
313.919 166.682 313.554 166.318 313.554 165.446 cv
313.554 160.56 li
313.554 158.958 313.311 157.539 311.345 157.539 cv
309.601 157.539 308.101 158.735 307.633 160.418 cv
307.513 160.844 307.472 161.31 307.472 161.797 cv
307.472 166.682 li
306.093 166.682 li
306.093 158.126 li
cp
f
325.356 160.539 mo
325.275 158.43 323.977 157.397 322.476 157.397 cv
320.793 157.397 319.313 158.492 318.969 160.539 cv
325.356 160.539 li
cp
322.498 156.241 mo
325.315 156.241 326.775 158.411 326.775 160.944 cv
326.775 161.187 326.735 161.635 326.735 161.635 cv
318.909 161.635 li
318.951 164.209 320.753 165.689 322.862 165.689 cv
324.727 165.689 325.923 164.432 325.923 164.432 cv
326.592 165.466 li
326.592 165.466 325.113 166.925 322.8 166.925 cv
319.781 166.925 317.468 164.736 317.468 161.593 cv
317.468 158.248 319.759 156.241 322.498 156.241 cv
f
329.657 157.64 mo
328.316 157.64 li
328.316 156.484 li
329.676 156.484 li
329.676 153.667 li
331.036 153.667 li
331.036 156.484 li
333.588 156.484 li
333.588 157.64 li
331.036 157.64 li
331.036 162.831 li
331.036 165.223 332.553 165.527 333.326 165.527 cv
333.609 165.527 333.792 165.486 333.792 165.486 cv
333.792 166.723 li
333.792 166.723 333.549 166.763 333.205 166.763 cv
332.027 166.763 329.657 166.377 329.657 162.972 cv
329.657 157.64 li
cp
f
510.24 11.1147 mo
510.24 -.414063 li
501.238 -.414063 li
502.199 4.71875 505.629 8.98779 510.24 11.1147 cv
f
331.5 0 mo
333.962 3.64502 339.911 6.21826 346.874 6.21826 cv
353.827 6.21826 359.774 3.64502 362.236 0 cv
331.5 0 li
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Nathalie Katrin Groll) ()%%Title: (mrmcd2016TasseLang.eps)%%CreationDate: 05.07.16 20:17%%Canvassize: 16383%AI9_DataStream%Gb"-6kB\=6ZS6]CJ:#(Ais^#>c9s$BcJp_k(pM7%"%-1+YP6(]=o6hFDr93HP#RUU_:U9^H1sMKp,p?:[8a0%$<">[Q-+<*m<Z,;%SF?Br9%&6>Y%]47a%W:,43`sYJ'<<cA(dOdNJpPELEX#UG&"q(7XK+(ldQjOI\G6Uo_L)[I&gFt9r)gAmX;Y!C6Ufn\*>(Br=&mu%epW#"Ct691h]<`MQ)*gC#e'2)p[`k,\Zq<.h`5qj?#'o8N?^^BW:.I:m69Crn(IHa`aAdW_Pg"OiS\HX-O-7'hu(_r[GPm&-,%o"%qfY76g$<_ldN?N)@lV-O=lZX=WX]q@(7+8u9Jc=(VIa9X%i`P4U)1&ZHDF9N('K?ohZ>asg4l0j>a+o%/2-&YL;j$<JMqsm2L]")%*`Qq"p7TlaiR0`$f!nt+]tnFS?Q^cGE=@JLniJ5:<hjlqD@X0IEk<L`HI/WM>!Tgg?Z&l9"lFhqII[STe_Y@W!/Aj7%0t-QHR0QV%#b\\"ooDR<%<0s:[*Lej(r^44$8OM[CV*?]ZTTgQB&'1r]5H'+5tD"qb&NTACWOmtqW(!d6:=?(J4NU/T^BX'o=<O\8Xl<@#qX[0%M>D\@o["N(,dr'E]!;V!8d>3G0pW-QhiN:I#9\uAT[=MpJVb-P'HY05*1ZR#c<e;$gXRWAd^4V%B-[R%/`-Q.MUb!-TXJ93adpG$%,kHKocr(>JZ#0F24T#UTr%&NfC>8O8[dgM;j'CF%GKXRac$O^W[dlPnniUaMH.^:2b%8F-L=dg]YtZ(08FS:@$:AW`hs_:`'aiTn%:r&ZV!o>@?YYDZeGKXRD_qsK1hCk4@+&4PgQd`iBjEIjVh7)c>$9td1nq<Xf$@*gjq*!dE5HtZ<KV-=E8V6\*T(!DsO<aZk9O(=4%1NJ/@a>a)e..W%$EbY+7Ynch`T@g#G7Mt@p.H`JK;WL`m:Yq:VcDg!6F5$EQ83,pj>4<VML&BmW@cA<e>k<;IA,$jE+b-:r/f!4Z%q86"@6LMA_nWQn3&H'IIa<,kO/TNB#Eol?ALh$TY3S=r-N75hDNifhH81pER:-DM#l/L`DbbQoKJpsp5E^uFPggP-H28>(Ii?u(n%p5SuiRIIrcM/A?d7#EObjpm^t++[WTfeD(d=W:8a/VVp\bmVrKQTM+*9:_-ejbB"`7Yiuu41:m23Hj8Ohrd4oE]u:i205=0fl.@2%p;?9!c$%qkOeUO/AerK[ffll_Z?p/4fN[#?c#fdnP-WL<;FH\dhF\\S/(%#MEkK&_Bc?=Cs)P;VMBC%$GLU"!K/!gbe6i3=8@^@.%W5&8Np\D5nbC:Z0ZC`84YljN[bOI[Z0E9/Wq6g(BIhJ_iO[IW*r_k<:C\=%o)"NIZF4;4ZEkV$Z]&J3j5KbK8Y2tuPr,jTE\e\TC%?hf;H-k(SK:,.V&`EZ4lkCV(sr7<SG:3DPuEGUA4iWj.u-h!t9OZL6J@k1fZ4[8e>hLkoLj*(YIcOXt5Q33pFH3`QiL*T!"#9o0+%i]k)RpR]<3<.=J1H?6fAE"Du6MhVn1n]-%C^ImtiX5/WR<`+kq++jfJKM6G\YCmL;dFQr/F.>D30a1;d4-#=!@WF,CqbqNID#c?F%qd[5\3?j`e:!7(uBqbhF=trH]PA<f`7t\.V->?D=D8oe#CJ`W!(.HrNG+j,]VeurS$]8-\(TE$))JJh%6::)mVjR#>QZ.[7$K&5r%h&8P!f[@\r>l&,L8AbREa/hP8Hu>oM-6lh?E2(tQffAd`82XR@KG3_hppR^D_j7Go]pX=,N]D$QrAg3$`tKp$%9o%_fmJ3<'#G,8%9BEM#[E3>0mdXV7djsLtHn(b4;=9fWF&'6k.&!3L[kcF%96A0:PHOZTN#M?jb."%NPls=LJ*`^>1D"48FH9$gBf&>'kA\/72o88I%^W5T-c#03s5#^Jt<6X[\m#]q32Ql!.)62qb>mF-[91ZT^`m3g*';hM_+dJR(m5NsQZ+#=J2UNl.S*@LZ'</L.*S'F7ST;E'pSjpo%3f]2HqiT`F4H&<bY2c;HhW&6*=ie+@WqTQGn'C:H^*kjT/`mf>7+!tAF:iPpRVpK$!i7X5CK90OZAi?.5-E,)6$t5]&C8sm9Qe\P%?M'kk"(i'PgcJ>JpaeH9EB;fTq=OD:&"s:AC#=iT/-;.^GGIpZl5a*RcFCige5T*_f4(6aP_?Te-qE:%"TP`H_b%M)8"Ps3l*a@D%O3N#An6L.\d>V>U6o!T>;kPm^4tgm[8$,;>E-Ml3`b5'CX'BE"7ci#=W3So`V&haZ$+YuLJ1P$K?,^'F7280=U/HD*o*uoUY@+A4%NGXeu)C`rbmhqbH_X<;Acf_d#"m;#g@Z_$i*\:61aQo0Jc^FENYKuRFQ8f:1@(DeN:-%l>P%!68MKiZ_9EIX-Vf3he]Jgp2ac=[q%Oq)CR7Lqn!_YB8h\L+@ScR\f&2"QS.23noiQg5%<\UZG-Y$je@)"ZqOf3"'.O!EePYg02FcuT@S9>nIl.uW>8E<O*(Ml#2qO;]`U%Y&@H5$/%*@QUhp'>F[%g1iJ4KUDeeoZph*%2"JLFBc.&?Lme@e/$b\WaRop?a*\M\7</8KjeGg_NoCqGUUbnq3N`D^S^.pb`Ffp<%#"h[e6%OgA7%?d,Q#)H@_IUcoba?qbfbX=E4I0s>7O,Rk$d\7*5GVGc`tG;3$^:lNHql-<)E:tg>UGte2KkKN*mH.&E@NI(I=TaB%eco]'2r)i8-e*/?9B?'3EXK/he34sQlOesT](_j8KVL>-K3!^mPq(fS+KC\;<.)b)cb'@g+AQY,L>Shn,Vt*?FsqL7gH"HM0>`,t%mmPD[`aA5hJ#nr1jT5!e:R2B<b</j:FP(>W7Q%4<aaF_L$QQDi+DP;eD4Y,)Dp2::Zj+E2-J8s&\&]T!(A..W1D=(bBJIKU[E1QF%Go]qRjN2mJ4XRoOs!2h<nMhkqS8qBK/CK^2(U&'/s2r5oZ\5<C=2;Cj=T">)A5kKCgCl)1ar[=-7HDb5=,JEO@+M39b,Gs"/K?tW%Gjf=\d9L%FSDu(/"Q'VP71,JT<%V$ENFu89M's.c&*#O4*ne'Q\Q<<F%`LOEq%Q8=dP:Wb'AqjVPdf]Z5KKG8$Bm0/8$Z,fY0BH-%F((L*j>f[pGq;gIZ\2JFYOX*LZ7E4-@<o5;O:-</jB4+MU\p22;QR$!bYpC!^?2-@Y2^^WmO]1:>U.Y=,&eqpiBG0h3A8O!nCU4f%H+(b)+X;J6nOr6tA'j!$hC&[?<=t%ji@*rJr1_-E/"(In1FX6$bJ6SKCXaglnZD]mjZ?]KoU#0o+aQS03Zr<_TAt[5cAJETg7YNl%egmP@Zrbq^RU_R(Nf+.;X/\M<VUW(X%VXsbnd_Kp?99iHg;4?CBWXBm'mZ75'-8qGd(1(U8&R:25KI/M*JZb_e?`;T#V%9'Pk/-Q%?&L^$-;I7_Z^N0sLUhi&-I(Lid5HdbiDE(W-D)U3>#\jQO3b8^Hqj3_Od:sKU1nWIAt.:/?Md5I7Vc%Q%6*_0R+*HTL-3%NO5Q7[%>&\9dTiJ1<A0I_!MRP=0o_!!"78k3Wr40nCV;Emoj&^@$5O.,T7jc!l^QCHR)$S#d=j`L[VPMg3.`6[i>J_DDV^d=Ci9QDNm?k)S%;N#5VUAn+S8D0TW>+fejm"/7qF`48F;-uiU;,V+4Ma9*fR^U#ni#GbrS0UMZ?Luu2q)b&83C+D/2ksB>.'Acs1er,RnIehC\L]Og%kg!#S[mb=%Oe;5[P?14';X'cWkKXMceoFCu?I.'t=,F"0;O9iM'_cD3GqQMQVD>'J-P1F![MksA.%\>;ZP:Q:ptEE1?c=K@+k]?6%Ni5<04hm7(Tt6ZCO[hRkkUmgV$ZZbFo/dlV54ij3EqpW?mal^/3TAL3^.)^/@Wd^,&G;%10k2sM?A_[aYF*=R/Y]ikjIpTb&^M2g%QdbZ:ba8g+NC/[O1%8=4&N1\ki]8$f"2s4Y8O:iC0jVcmYa#G:J$/6OW;RiFbJij6ad;-KXi;b^TNY7IJ`c.;.s!eMX>3D=OrNcg%W&5*nS#U.Z8jL?D`JM$D''_ZGns/E&FEE"h=bc(J=S*+Lc`2S:H1jo1S0TK5"8)OHh=J<imI@Sr^3@Y"#+689.Bat6R4g+l'rYe-%r6*\r.+43td@SJlOb!:)B#etZEB@F4qAc\0U6\D31@[?\_o/kuI2+41KM$?'<:.\brc53@mt9#YBGRbq\d/`rqR_sbcP0[4XHhP:%U>3/Ef+!"B+P3&/C7XL2I'd,ihlGfgXlFG4[Dm.\;$i<u7O>7aDtY^4D*F*`++p;=Z@=_uRHf!GeAJ:D-/&S>CY5mTWmQ^&/3Si[%A'FE&W'\i\V!+2_=),..=BCI@(9>.k4YoDTs3VFCLCk:KCW-",)6IB.(4hnrBB=M`NnX*48mPr%Fqihd@2]O5[Qmj^]=Y'D?\&rm%<+Zh/Vh+3'ek2_p,@cd489G?L-U0D)<L)R2Wa&P1V5P9&krEUHOS->sImC'V3EC'l9IOgVCW5i>YF[s$/7l@!&s$Osrm>7+ieYhV%`p`e'DJC"<f8t=o&O)tYiB+TFZX3Nge.o>/96hn076g)/A\H'T*TRed[QdL7`>KSJn6J\m21iBi\66j^alrY4C[c?ckCVoGW]g%<%>N4t9d60:ZVkR%M.l;"%b)G_ZR\MTnejS'2,%!']ceJ4GfBS?O'omWU5^uOF<7@/!;5rF4=%l3OnTgjSLG@@+Cd6hn=<?3ubYYS@%.EA8Bgo.soA'^!g>Z!X%6I10NV)F'C0dgZ?)g?>p^[\C:]T7um>cYS<]FhnI,;478!nnH$ccBk5;euWReSB79NqU?]aAC*c19Eua%Ge*$rloA'\fC?frriOOm_mc!/oLd>)YLDc!o6^$i]5u[C%(lFC+*N)4[0*P#D1(@jnWho:mZ1O=\@(/Y%(j.=VbU\b=7870P%Qq*%.I&p=q"UU])_<8t^K,,'s(XB+0C;4J0#de<@<9f:<1D]tM:ftQC9Nc\2k`%>Uq\#G/iK:^]f4K46[-7K[bkgWg?Ip3^H2/A>GjZ$%_;/#d[mmFID'Z1LHLdfal[Ct3;6/ERp6#hZpiW[[h=dMhX1f(4^Eqd;/LH!?o/Gl8"_iDeIs(7DbX9-k?]q$s5IXIZ_tN[-$](92%rttKE%:?.#-1efYs!;sAl*TL_VqoA-RakHJg$Ue&YouLoedFS<2]Cn9F_Dl*\_'B,3uI[b_:[.U]to3AOeDCEUZ@oHqYuX3$Ir1X%q:r#o?^eBB_sE<Y:X-o3d<P[U@s*:64a(#RrgPZ$%<>G8%@X\*j7El/e(Z-a.$piD]+,%hI$R0UoV"X#DY+m#Igs1pJZiL\#;9Z>%iDefZn%m'0?8S4Els<&.#@A_sr6]9O'A<>-kP$mH8?O6#Db^PqV5h6*m6WT*[JJHF/gms&c*o=0,ha*W_Z[Ziq$Q"S'(e6JIY(lT%23O;U^r7@Bq#R/GP>:ZkH#maHlN"U\8`376Qh<b4\Z=e+,+/V$$@`qI^lkG\6RIl0rP>:<6l\?:hL"i18a7Zmh?Q6E-'%P:&An*Q%6s+0s#8+M+0Yprj'kNd;^VpWjdJQ31%#AB.GE<2Akm_,D[-t>C%I1m4Adr,@XnMbPf9Z`-YFTuLm*4)Ar-uAeg2K+_^8fe4*"Eku%6^FukY1K`RItQ`&^ot/G]mqd$@1^C9<\b'1<SbWT_&qJ;^H4[7mbe%FmIaOhJt)mc84b""J#g#4e/%$AGM9H5Eq*anP()KWJ#IH1%S*^%Qo+StA+[SBfQ&4I0$0eRYs1LP'472c5f(j*(C9NWnB6^2;s,d*W-MQXjmQ[Q"B(`FZpl+0]W6,'2'7JuO:JZ+LqJWfOA?Q3j%AEW@;lcFUH*NhXK"aLKq4E)=5290&f07]Ag7\ot^@@$VZIfF=+NW78PT\jM8rhoYQ[#r3!rKGou7^Y*>_4OWn^YA>u+0k@VBA!">%hou?e29@STO1>#!=Wb;(L*P+8hocaRPd+NW6W8>G1nS,=j2Y`SIkP0e7Im"p"GRsZ"%WSFNMceAD<WjXNV<0d&GDO,47*H'[0A_;%m,&lY+ZfS68U,"ZWc^jbr[o5MhkXbn0%M%,@pN8JiAS4MirVdBM4`SRkTr=.6*&[V,l<4#kEQJ#I&Ctdea+Vu*D?k@,M?ip_t<i!%8%7+62gW4rP+CJK]e6IioKPjlT^a+UEml^qggX!)<F!aBs44+X3kaTa[8h(q85qMQc,$('kV\O6iD]'Wrj+h*5NA3fH+R2]8WiWF%UR@@I3Ga0k=dB.0+n:2\<].pFNpVt(lW3?E(h7L7rbG1erGF!cNbYUD,iY!qWcspM&L7LTenOfQ@WT/se"Dme@I,rQeJJm3R-[kc%5_$QE2?[WBi93;=(=h:"YuC&?6(P,Q:SM7knUSAZY>NOFZbI+<b4j-/nthI*1]3K/Ud8AO&3sG?%-VrX"kHDT;:[6WP2kL4JlL&+%Ce66nW).@2<pcMOSit]5h058ZR`S&[H$"BhP;G4]c$fm..>3Eb[dl2YnS>a8HNaLG54aa[7]7gN&u=HYd=7:I@A6PtirFd2/]S4T%-e\XgNQ,Vcp1WF&2Bm5_%L68^F>>/.L3_.H[enl1po<$i5XD^dejEpGO:!;r%lL(9pL.:JS/K_p&c%YIn.Ec?]fE#T2I"GB+&OO0%2n(<fp@GNbgdiK/\tm/fe&d,SC-M;J[p'o^>1E:NUXoa=_-NL^+R!",=)ZSY]g=LO[53WoVS/s<3W6)/H`fOj1-[g\SaM#Tc`H8e%XQ3^N0mUiYBmqG66T''tX\Qo^JCEe%NItYTcid.8'4U?inR83BRSqU;Q%!7@QG<Jb'GJgVN/Yp(DI!'dX3mm/=e6:,:9=!H#V\L.%\7>Ih*:*e0&qmMSPh`qAUTrCWj"QTJ`l)#`q0%;OSOR8:Gko!p@BSkWW5@/r%]@37#VkF9HZ4RXoWoa\Ui@U;(+6cKmE.FG;6em6%Gt7KffaRH%SdPJc2AOX39QMj/G<2O160KD&i:#Tr)f;hQ7^Cm(q4B2qgYggi/[jQ.r7CEi=m@^A>l=lP%e+!^e'<h^(d\!ukQPn)%kud;bZ3fB$B;dfnKL)npk-o\`R/Vu(.6RR\s6V+Pm+eg0W"/^4(P\Q!MS]PPfPSB&>7A\DUH-,c"8=56r*Gb'PDG.D'r<>#2E*Y6%c*q5df'>G!#O*6_g;dXh,sqqC0ijI@s7N"$*;$?nTO(42is"1F=1Di,ArL7*^V'KrJ%i^jkJi#MkL3?KP+CJLi!S2+ccrt/UL3=E%].0OK17E'Mh%4A`Bs@Q^>5MI#44.YrQ9hk%7"3X:,3FrI.4R],]P'FeRCSq9j[<+DP73gSdUrCLA!_a&&)@Em22j<fT_=Eq#?RgK%,j1r%>3u1Dk,Z$2qMaN2@[FaaKiW_"+ph$`7^N+n/t8afKb!0Mb(qCLK@1[Ybp6k^F<M4p.H31B;B]VG#gd-?H760WID'B##D\;c%WA.'AQj:cZG/<-'N2o:aK8C,c?Dr$mqU99Q5:-tZ*WG%)j$FO79(T:maZqc9mD?6hRH!J8g[4V;=lqQHdUQnRGipV_>WPIKXjL\A%'4Soc1&dCY/ulTC%f3(aQ$U+R`M`MN4W',,"*Fa.I'ss$W7"CU@Ltcf5[j01lb#*>BuY5]GLM(<<j_>*&8`3A1MuJXq'Sukd]U2J%DphTLI!WXT";lY<np@;/WmV9WXGHTJ<2h[q?Sf_*1]KD*?0fGShs>Gk5,d6aj;N!0=72LYK+A]q<6($?cTQHMoR2LQcRk)Lc5)fR%`q]PJk!!u4EY"U7bskK-hBuTC>]kPA@'m0%\0#=Cmu,ou'@Jo_<`PGKH.47CnNeP7FRF?A-H2%s(HO$f+If>XbD4h"3Qk3IT8/Xc%Bj.+gV_.NtcM*#WUW/Gl/!TfXa"u;(rgXI0QM"#Njj'?Za8UFBppBu5[9[=NEK\a[fhk0#PKc1$Bd9e&HJc&WC@Ph4Q81'8r)L/g%eamNr*nkSr<fh;N^:7gEajSRNnh@N3W\:)KakSMSacpeF/&QV8eX7u/5?L2gV\I2a1)O,oK9=.@GdB"r:+-mM-TGJa$otAs>*E1`%?^okALn_*A>:;Dq2)#@pOGD]UL93o]<Bfp(fTUVp]WK<[/UWLuYOdSGEtY<2U/J.O$#A`kk9J,)ok!**8$0ZVRr&qG3rS2Kr2TR:%bI/hq7M_tRPR39/,Bd,'i)gQ,nO*nJ^)Q*o:V#gNScImF"=US&b$0L>W&J^9&)RfRkt#WR7TMs'V[CQOjqd:$<Y4;^4spOen5%2X%2h#*FUM\%H:0h2=f`ZjpH0<F:Aj.\VhWnZ3J)CsZcZYZ`r="11lMX:UHcs(<XSSh]/thP$&GCR!#&UT);p.t!Vn2nEkqH_"rh,OU%2kI%eetC2Z`_UjllmCGeS\EGBl./^bXnJZLl@(>p`@bDFZH(Ubg?nSh9h`,R/UcGq;SrM],G'3L@XQ@j8j3.BK=6igQ0?Vm2/N/:%LW/24R_?Y.NK"bI7_ecSY)_q\N"%>!@`SGb#c(VmHR&,QeUMBFhQ#DR9mN47Ceg%,?#0*UNap<l^qIqu$P(fe`gTEq^Wco]rn,f8%HD].Y+&i,g!,2-1DY0dSqq(_u,IV'49uf+\NArE7fW'*N0;!(Tg\\@#TANs2NA`s<ppp4<3q*HOo_Fn=TX7"++>)NBPs!V3VDQ:)%mHL9f8]T&U.9H#qD:[b%/0?9to7f:#UYI465Nf<1,HcX7I/;2U6lJ]GnVO]fa=?=BX`[,g2I0t?fmeSiV>:jbQ#$9,X[_t2>3f.K%F!"7#L]%FZ5>ITd:[LHFhWjg+3pfMf]aKs-Q"^odJ^;8dYRO;SeT(W:c1L!JaW+OH6d+Z=3%nqmI+LVZO!h<pAa9.0=U#P-n`De_%Z"?r<pF#`[QC[LKLYCK)'8dR-@;#)XkY2UJ7&l;g/8QOts+`mAF!MF9Xo?i,Hu[f>]d1pMNTO^QGLE(Om:HIPi[=R_^s^e8h;8Uk%&]aTOW;^08K/I+65^^/5CJW^t_!%]Ef(Xehn+l"Z")WM9er[q]lIW&<#3#E_h1Qoj)g,AK[V:#V>.[!jUsN`#D!@#1N;#hjI)k].%2NMU:jS`30S$Yi0h,m&kA)$X2O2TSYKf<sXXi>:=ejKc;fYfga@Ztuq\Z27'HIniWU=Z!lVIe?2(@k#<(O*GD\F6I]h`%uDe1^^Z%;Cc^HOaW)\*%9l]'0U?5>FU^fYQk%4XKr-(iRib\;gS_!@.G#o:4(WrIEEk?f%"r5T'qRimGt4>[^_OG2lU'-SJHBm"1QoJm!."4%4Ij)f>.[n/>HM3an(G%&l24S#qs@tV\NR?%Sm%_X.l=;preu'8;t?ee[a)?@%\1e/b4iH!Xkp;EkMA7bIW"n%n?TF[:%o%?on.^m%qXA"*['WpS(3a\CGW8173XAW\j%LC]^Gt"PCN]'')1SfoPja9L95EGM("HiiSQ^J-AA`H8RCUE=B[%P3)uWJY3;rZ]T0(dH/o@^k%VL!o6DifJ*3NaW*>AMO1l`ISHo'P"#5P)<_>YYaOo@rpc`a<_8s7E>\EjIqE[`Y/=GE=u3(9?iiMfRcjmj:)/=K9(6S5#fh,\HuD%ao?O3o0%:u=Llrd/Ub7d+`Y`MQ&@k]Saq0k_(7c]V`%VWK=t9=9VGYGT=Lte$]XX"mp)bV08?mF4\'a/Ihm7o]2SNIn7*ehR\"Eg%NgJ;m0`3Z?<%HMSj8$QMF2,:q4\jmHbai[qcu%`3TeUn5\in7YI`]!5F)O_;q\Qs:>'^*"hf;Zm0Zn9p\KGFBXT*H&o2]\/h0mE4%?PN(3j_Ce3**uDm(f0njKC$GKT<?%:h#!6.rRL4+3Th+MccWfY[oWKNTk#&7lKN,)DgcAT#o,oaNFI%2pLX5pR'!MCDQVcee<T#&%lY(HUIH+eFA*e'!\k#PfCVr!33lS#G['fb?o&Ai'bJ!IIYP3)*X;kJ]@c*ZjD>(WjEjuAf;]%gVq)u[ViT2XY`eSm<ZKq!,)s&sV%NE[>G>?tDScBjG@1N2Wjo;b-9dH"Cf]Z8=KlIk)g+pH+.$n#O)5Q#)2$=RSmcV-,"(`0)YWbgH+T8X#M<4hG+`U1M'?u'V#Y+8+#%GJ?7XQKNIm?ait;gOnF#G4)$1oX-KrSIWsuQsE0L<2u_`Xd1's%q"q1eD"g(_4R?3a:OWC;La%Ai-N-2lIVkZF6QmQKbDXsd`[\[%p>G"Y%VNn8B(Lcm04/$9IEr0/0%MhZocIQ0$8;Cd\`">cGFr7_oV0O.iCILnIt$/)00UEN:U;\p#NT1e=l>9VlcTa+b%u?<l+6Tq%9o;e)!Xd*sd-AR\H]4IQMU1O@9r?:mZ+][h4$,El/%dE='sc)DobBb`>SoQ['<0u?hO=Uo>Bnqk5$;5MbdlMWq<ht*4(a^/Y))E?%oUL-1\_gk&F\KF7I*5a/fZr=AR>g;sar==2YOahge*A`RJ\i=\`U28V""66;bI=o`[^f\rDggED#2b^OBFJ=Z[-E#BM3/7uMOD]D%oBIqBG(jPCknTi=2^^='X>X*khsrB!A-&7X_:&2:oc=S=r#H3jL:aG-iqD<Erg#WofILR'cBf1/"]7D,m<Bc8cL]VrZe]B,'HCJ_%*%Y52MUJ9)k#0D`.@9K>VHuYt2F4@F-M+EVb?(1f3WEusT//B[5&2N8.6V9]Ao^DbRl?kWM#4*^l.3])noXIYGBPmVXEf9DGT<%3%g.+)"0<t;WO@XqlD)Y);Wr'j_((ZGW-]?OL6]2gE/:ibP^ff9dh7Paah4U8Fibk-1fNR#YA.g>)o^FGV<ijO-c0O=Oc?Mk8Qd+Er%HF9$kEm_S/Q8ZKXJ!-^55$Zi)/@9hT^H-5u%B=\`J%cC7Ap"JF\g;M+5'_Wdo)ud/F5fAimTlrMd-#E_@,3TQ_-iuX_=l-"::n.4%HFY?i18O9>q92=e\AKQ]@K%\%a?PRPOnZ!IOIE6klaStF!c8@F)F`X?hZ3C;r\VLBi>Nh#hh7&[S?[:OGR1P:,(,k?0_QOu2iPH(%e3897Km&N2(&GG^ZR/@ThBAQro(L=t%2en]K8=!b\_.[]`J"(k=VF\D#Zs/75U$\-&`b*48?E`TdflLclf,^RY33NJJmB@M1!EXU%FA(9o=?Wi<<7>s&a:2[`jW+^a>P=1%PGsC<a7Sq-0Ii(A"2C\%dMV4&r\PoWa\(4`*ST.M.AgR[A:Y\ZMG_39j7!t:'#hr]oceCu%mUBO@Y!TdA'MZC9JhAFI#X3W(@KJJd'9uMGI+TiX[K">'(cO5pUO7B*i3tp,!Cg_`a=)P_`4;In@fO(_@lCFlaCaNS8PttG`"gO`%f4ojF6]HjQ)9L#\Q%=<L3>*\$bMO'IB+is!l9-nuLc+->]FdLsVYb(IE%=gm*98fn_(k>t>ho,Zbni8qV8B$@fR#a6'EVgJQ]oO)%(i>5[L/Bq"C//R=.DCTbb[R.O\i;O$\iPGA25.skkJ":<lV?Q"pQuC@k0C^.\'%usNAE!-Sh."ZL"P2+SNK&:aq"_Y/*3bLbVmcX%L<$:$o)7JT$6\AB.[jWo6>iccd_eEN8BXBmOto1q1.At0S9]q@VdcTgYYh!am4K)Z]_1UM?>o@bTn5s07qPG5I@H]:$STD]CFG6n%k&iTQpPms"]6Li.HImLs'_9M-P.\^?pm&$Pl[CGa;!t9o4<IcWB"onPXB%!hF\B.(ZY\K&[aKIgP^e'52ASqIj2u2XL;-nR5KW`Y%K>V^%29TBe)4";ne#k*V9*[MT40ldr@g7/E?$OD,<X_7<lD;HT#Z_`'mIYrZ5'Xd@R6kqipgCMsQ*n6S)dXFU)]PVVCLQ@C9bp!0%WgZPU5$LgBX/;[mVH%XT=eN9OKc>(h;"8glkJok=e(YHq361Tqpu?Nk.B"I1F>Lt"/2O5F9-$q?;_@^RH5Md8Jnbf(""9F4cc4GV%jgn=g^1FX>I-k@E>\""eXM"SG??h%9q9g@*MboTACH>JCjc?lg(A#SGgVM=XpAP\hs/)DZNKI..bs61A\3RCN?gtX2cb7@H\F^Q5%_+q!3#q;pnTjTD6M@E/'8aag&/hCiZk1uC__UleV!NN-q'%Hdt@52-"J)M#uN/Vo@o1aMhW3sdJKLBRO=iaXQqYTEkb+=liO.h!*%!6g<dF2gqR*n9U3(@G98X,BJmf3##e[1!c#*h13,PhU,KjPM\]1Oj1_s69uVTl5?>%otq`RtnQ'mJ;n7>%tZ_D4OIV>l2]#fph[1%U"+[.GkR!O5Y[,93+g:pnpDU>e@m0N7'">il9i;9r`1_^o6sh9c/DYPGM(1/jIK`90UL,_dNEHai&>TB&uf-G\t>:tjP%kuKC>Ea%2N5>?0<65abgO*2<1b!fOW$1Pk=4U&*cYW>p$6_YjnmQMd`0i3mgM#DQ4.tL5Q?&61paQ/o]/D_E0l'^eu.",kuXrqA*Wi)^=C;o%L$$n0*7X6Kj.\:"@VbtuEa)nDH@6\QrQ(P#=0FlU.kS'MS[8el)oAhW=8C"6k.=,bS4qU2MI7e@Yu2eCjAM"DI"JGO>GWA\:L6[e%Pt]lc#_*n4IG8,@<?rkgJuH<Z!A4T^L7)<aXtA/SIr8V"=)K.('qaM+*::,I746LqfOt3Vh0+X>BUR+($SOFB&<(i&+=-76ArD^F%itO%[E27)$pns$=P3h&0QoV.D[oU6BGa1SUbkk:U(NPeifq6J4&ug!IB;\nV?ES1.D!)_iQc@j6[bbb9/u0Un38Yi/R!U&gNI;[>%WSM`;?23$0FVgdlPEgVZgi-]9kaMT[Sc%Hn^'<\hoLhi8hNPC:Vjmh6&oVCYB<\dan[#e&[.F(*[;oF$;/q*R/^>-(EoCLP712E<%%`>EF1npg$?`LYh)X.*F[Fj[a<n?H_b7/C$i_1T@.dioLHr7fYhcc:$;"<[Al/$+2(8&m0TU4)Ik?sZu[rOF(g/2W/[[n^aL$-r9%kV)knpTn5Ajj#>[3/>BC..M*E>J5,<bT36bDc`BO_%UMQ!jY!QVrFrj*:E5hAJ+L)n)rg0eX(*":i#+S)qauXeCMsj>!q+2SIT_W%A+uBEdW66B"'G-Ibg1BV^(W-;DOHQN>t^lQMr@4tf6"b"AitWU]j?%).u.21X52,BAPKO!]g,4T3:8?3gP@^iWRi5AN]+FC(QIp1%Y$>XbYIUuKe]bLSl+jNhIl8H73,Xj#UJO-`7:43&2b9j*kO:u[mP;@9VjatqSFY7SmIN'LT?I&.Z]JICWKjVZO&,N9UP)CWk1lN^%h;$COmBCii]UBl^j^:8rlJ-<mK4&ka4.S">.(T&sim71!\Ya\jrH6GP)QLk`Lg>IjW-`TP]#f);AsLBdcgB6U/WYe!DL&M_D8gh"%X;1JJcYTh<@oI:ek2+H'B:*`@j4p\F1cU94FZ`@l?<Y85o9-_up%A4+2r%;U>q4'g>oI(PeGdV^`cp19cX1c-.F#.V]]Dn6EFIOQ%k"_qdIC7U7qbO8PYkCee_beH?c?/lY\A.3DY(+c%QINaFk0sob(6!XAeK%T'LnSY?k;](cm_1P#E><aoO!"M!a)C$B<N'W'?D]G!%>CnQ=GbO4r><?-]QC<df#B=1U<W1J._kZ#OnD"pl2JKZUrro6?NAZr%/ff<I-I(q3D6U:b%r:s#M3,J3r4,XVa`'FBgcJaM-hrsp%g+B\<?U0Gg,?g#Ea5/H8Hmqgo:*T0!P&CFlW[TP/5.P:SKq%Z2rcZAG17@`\gB1u"5hV[bKH-l#Tc#QfE4aKpOjE)`3gGK9h^n+Z%goGpU)\6BFkdkqf`A:IF(GhK=hU8dnV]g[MK;l'9Kr^t7DZ@k\CQi@Ys(f;MIg_SfMP'pcQMpDn9=&bgUF7(*InQuZ&T`GZQ_S?r%lsV8G/e2s!i,&,H(2W[;-Pt"s@eQ9JV)cVX]$"o.0)RH=W*'VbdGPX1)6Z!0rJSkpimV^f)L$K##OCLK<[Ok)Dr*'1K,XWFrlX'F%Bti[N09,8p_'p1@:L0pEZa8uTM^t@XDZ+fVgmaohLI\>eoA&li2r$!)Wo.;@_<^]+a7!/Ljmd:J(MrgN\?2:@c,NDFOMk[?ck,N>%Saua;2U0f9E[S!7:DTEfQ)(kCi*/@FGo3;`r)%iJWj+.G2,MD;=5W*_f3;p?ZIbBNmjNCi;VL#3c$,N)M?N;lRYBjWXju1t,?EBV%8gg,^me)Y/[ar*jS(6oA5)\*4&2a"/dR3lA<G8Q(B1dBudj$]["bmAFimt$Z'HfJD%c#q+"k0<Wl!80C^)"GNn)a\&?ZS+KO7KK3%:J]$k]S2?k.\ruR`U1RpDep2'jo5H:5:JS52$Z$)md/]j.upp_/V81N%8,6[a(mhpn><rc`mo=jnd!1RG4+J-.8MP.hMc:a]W>ET%bk&<Xh"MJbi&+SflltVJ-dPViD>sV5c6'u$PTJ/JDc#s//4oaZVic4Y=<NJ%Sql=^\eQ'b]*<u+dE8M3.;;?00:Q]4&g)iVr:ujS%H;!`:Id^Z.fM7\Im>.7:;o\7Mp6oYB=#&@o`O2q0g!fU8,c>G$iQLu[0$L2jf:DU'Nhu)r/D3(UDs!'t2SPsL(lHi"4#T^=g'/fe%5O,FMTgA+R[?\uWL<i0E+EIVsC]<0.P<pjRPY0+ALEAMMEU-Fq+=]P[F'EGGY@h8ARt3Ni-(>6kr2cJtEUnWU5;ZJk<#X!K:?cj"%I&@AoHi6.km]JaZB[.5AXC!0nce;.a5/4N[PH$q%CWo+[s(I&:\U?(H2HN%Y/lIM%U4PN3ZL/dr%gP$HdA9=RqRiG4k^-Bre5i8b%iXF>F.jU=d1N2=/.HToII1;?hpm,ipc*Qf<qsHgnEfmb$6^+j59dJ)DG\gdD_st0ThqH0OG\tdb./UusbL8%[M3O-m/(GfT36PSA%T:O_<X?3j7<KJ7i:bTkG'F8;'?-HA.^?KkPkAEq,cYl.(ZM9+k6Z=e3*5K&.RG:rJ%>efdl]Kqkcg?_Veg^%Un"`6<;a$uti+9U]%k#_$CAg_eC?)n\*p$,N%fN>S`KiHr7fm?saYSPY^hcs?sg5nFHbFQ4g6X]I7`Ugj\gKgd8gUUSEc@>R0[X(#IWq:]sr0kqk6(b@Q%ZAt#<Sbm&ef<,p^?11G]](Mi(jaVQfLb(PBEEn%cll,hmZ1bT+Y94rTq73o>iaO]J"&84HF2@G83j+ISZcub<j`"(DDMW\t4'E@t%Z\45O[G9a?:)2U&(!kf[P)d;AC0(kc/lo"hSKGgeksqaY$9QM\h;ug?`;T>YR-"q9q;KR/OX*rLhquCY?5Tbe8i:P'bo\Jf1_V=Q%]mIE1T(:<(l1k-4fP3Uc[K!T#@A\C<gV7&#jDtkpK.YW.?g`N`*W%CpQhOP(pWMGp`aOG/Is>#ZN$05d_a/Qc4&o$_K;6X$b6u#>%:tL7BV!Dm\3^<Mp0m-6J,qA[H'Vm3/He!$>0NC#DfcEJuqUKgPDmH6eQ-#St'Aj_PP\Q9&ot5?SD$nqMQe=b6-h0>8mV<D@DZ-]f%]CZXZm60O4p"A>'2I4RMEfI@`I942?IN'i`6+d$+e_S-6'6!"'r/of@h<j)`Co>(k:pR.`q*!aUZgn%W!m(8N^.I:c9](/sheopA%o5b/;=o[mdHIMVpr?j\YX6i4\\H:<G)r<65%[Ot:OBu+Fo'*5_Wbk"'>!8MFc@kAW9D89_,.0W3p&(k:H=p_F2uR4P4=mCi]q$(6%L0CZ`D-4!pQc?gHg0@_hfscsMLW=0g<,$&$s!-^aG)'9d2hq?F6Ttkr4ghE5NYCMMMN5>%WW"-/k^P^H:R(GMO9AqHUjEFAm^N`E%qb68&LATmrEW2=_Z:bEqi9:J)I^>QPitYeT30rISNE(>sClg;6L"ig+E)dVeI^L?f>"e0/hTOE#]sBnfcH_t+;H$4-YA7&E?a%AH%jd.=LH?dS+/IbcVVj7iGMc4?M^bW4]=7^6QGH.ldm.@FZ!>&=[FZ'aP2XGg!#;C)RY1YQo'R</Rh)0BD)hg\[f@sDWbUn%RmVV?H%rJb2tm35Ks>W^h8^$jQBn[a*j<aO+Sf1`-3g0tbCk'3ke?9Ef/.cGa@$AK=7b<t3!q;oZYeFL)\&e_r8Pn',KV\[U!hUJi2/keRJ%>F\m2YO?8odQ)Y%@opO36otdpDmt\F?n6bGHZ+9UmU'5SZ"T$dBP2P@XNnJ,#;a-J\)u8F>d13eN0V/j?Nr$N:?0n1iq_HOb:N'b%TfRD[jL=r]NUdWMl+\k1-%)e<?B$?(b;*BZm5%!NP<hH'G0KO!$hShU2nsM,i(UGROkk!=-)%e;I=?X!DQGCh)eS>PAW:SD/^m<:%hQl9%.iWT2SC)60%e$ji7`A1_o\m8\(6HuKIH9dt-)q,FHMZ:Kjg5XN#k5J3YY*L!F&OO_G%cCH\4cP>8no7scRm)KB^A\'Tg3Qr%=McE.b[04J2pIr1B(e,f'N=+lP$s>XJBL,]Sf$$qs3ZL\3aQ-5ZnPk@)6U`.REU9136KG`frJDU8Jn:3Y)5NK%PqQ.B(N'_]7m0"%McW+'.r<?R2i_M-N;D=(JKnZ0W=OZ!F;NN>K$:9ZC^_b'KDtr*F$lFhkNaXPh"g=%6fH#Amp[J_!PI@7ZLTr4GMJ>tC6qZW[DC58%Ch[Pn\u$Q"b>NI_UHY/m"5$0LKsb`_^)%U\\*B;uC%a-@!qDm8ZL:ing>:NHcI]88W7H.F2gZm!)ZYb.Qd$NF8@=EClZi\2Cn%*4%@#j%Cgpq_0XZBB_(Y$)u/^;9V@=[rD](O:2G2VK9'tdcie'a;"ff\-tG@l:XG6PLmWlX/#N,ps$Z)Gh`lYu!tB-$c5hFHbWQs+5b%(%eokd*l$m(4T)3Z!Y6A6Dlfdla,8IA8Rp_Ep!0.g0ufW2AWiC8guOA!Cm!M7dDrL$@DB=<+SZY)V+_Dn1\N/i*hqH*[YY;dl0o+%_!S9XPDFCtB.Y3I!*70WK\M9K_M)jq0:8Tjr\iO[BApl+&^W5$&g,ZI,2Cg.i5Xk5^_UP$#J1"#$+->>]ZS/4'&s`)62cP#CbAeT%@!Hl[c"Jr#T@^Eg]sWk4o0ct9YH<3<9=o#;B6IY';SOh0\G&Ipk0<;9QOMo9Gp&UY#H1H@$tu]Z>S$F*+O?7Dd7@2DP=rCt0LK_(%A2!`M>(-*d993p#H^if6lEe\*OAkngC'HFl\oWk4F#)tPXSspWRAVntV+Mh<Bn-@ShKZIEm,KLL&K@2XbkEE@UCe3cic`>paamA]%[>V`THA?i2'mP)=[IaL+o1ZU]mTB)>Q-I0)Za&L?5eZE]<.:]8-u-(5..ULMKiu.F2P%RgI)9D<*!#++BX?CS`d%m)*He[4jcp95%b%[38hgR=/I(SZTRtkj"n7ueMbQP`!I,.ke(Habeh_@#b0juW8XhL>Cg%,(UhRLKCe*I9tZJ%A>b+pC3'o#c/d-tK"@Sn,%Ip(R<%=KI)p/=#1KR:1cS)[l8,2_C<Hi4N7O)R01X=5`OfLcLDO1i_/$S=\9bi;q6M01aDh6obJ[8n+,cSSSTdIOTgrYAT_tfV%hs1FM(r%b;n=I)O.jm@Lm'P$K4_rK(XLBKlF/I^o5XLn/?C?"Lu8s7?C]BH:Xi&#YnD,!U4l06GSGINX6j]K$BS42Mkfr'bs$'BqGca&'KYL%<&-`F,_G[ig&>q_M."KjhomQ38>L>N7."B'j_,bF428!QKs5Wfq=<R97$(!TCBs&rk849IrpX@8I)hHuUA3-'-UiE9!-fB>UAqgo%=VP?X4O*h0<:b\*j\O/-N#PE>MM=N6"NAO]o&!rPO@dKi[?0&(fr-lu5>MC)PU).XQ0dB`Wi*H\@iU(glE_n_jgg`RGA$[2\LfqY%\SSVhrZV]#+<2s34V)$T(K*n9;1-e9n<ookddi/AF;dV:H#BK,WtXZFFmZ4r@GeH95Y#hWrro1G&O=3cfu;i7d4H1Wb/):UmD"8T%E[m9Hk^V:BaV,#"HL[kFs4#b>kC5+?G3'gCC6rtT(*=_Y#-$8P-Lr%W[a4-opH$I:-DJ#nN&Qhog,Y+trTno>+s54Z?2;9$=F?Ni%@V9:'qmWHg::b8'NVu:(G.`_.#o[n))kga4`;5"=hF?(\#^2_(k'Tljn9C:'<"\pZ8`K8cC$Dr\nG"b27G%HA7V1._r3WbcG9cZ(%D:I#"R?,i8EEe9!gi:lW6M@U-*Q\5Rlndh,r0=h9\uF1"lUp>^*Zk]U_nt>lb-Zf0XQ8g"dK1,^Xc+ZDq3ou::Fs<jjtVtT%n%T-%B'/<H3R;HFja"-/j8,jQS:`qE\')otFpT&Q9oi;]e?PO/oe&D_JSTNB:@F%`r<7<Gj%DA1b$.MbT?:&+hFQrkmehgPOk"Al$d\Bu%)&WT_.P:gP?.><qmsC9Fm]q<%fr<.6)-6*sHSF)-!R>aCaKM8^8#q7U%PNmn1NJ9QV?"d4GaTB'@#Z\2Cfimbn1kp+$SC?tbE`aa%g?(#FmFW+9NmASHpm>BWAh.Fh/bW)!PZULM4(pNbRU@[o(.kZ*TB'4EkJc4RmAX"=hjlgYC2$Wff$X^i22`P(WX-'LG04U57fJm%%N[sF1^"aVJbqukIYCl#nl#<M&\um+mCf[-qb#\2#d&T6t9^0dKQn3.OdO[$GHA5E^/ta`)aHDBe(ndC'X:[,<guh>B(D]p'_/Hd[%k&;$2eMe!kY6DrC)H647>Znd!j>Y>hX9\'o.@r-->IK!]pc=&^aJ"`ErP:FS`55sYhL0TbC2)\M'TV`[XA)DqRDMi#M7'>).oV;S%5I37*H"Dl:_+n+%lMR96KHJoS`XWD));(gS$,+\]Al"/`7Z[R.KZW>o.c4/cDq@)4?DI&*HV=CN\+IF^99]+9fXA]t^qD&&[e\2q%d,]$iL(BoGq5Y>sg/1cF8]#iROrYi3hYar*-+0A`T$@+#4%dZ?J;<r34%^u;-[t$7P)@sE^AO]G,o*ha?@K_NP)@t\Sc>]1-+0A@%f)>XE*MnROrN[H?-+TWNU\qD<V'W[E`,+cVm3nr^"PSk4'g#$&1BjC+r)GgNC-RPTk.bS"ku4WIIsX[WM?#4'fBjt\g0+@:G*LL>%bIB]oIqhL<SNVp]GXk=K!58<9*@6D)X=sU:*MmcAbQ%L#P.n[.lZSMeHPjM47qkQ_-`K7fIssoPF6h#!G=P6l-]P8^s)U7oC11/e%rElk*oJbBg5ImPrUoc<M\fIUn\Y&L#)uIf?8d`D1IBpW"USRUIE:)Xdm3mDT<5Cf*USR6]Za#"-7nL1p?alf+BV:1Z.s@-k%=1GA%Vg"B^NQD.`NfnEe[,_$6G*LL*&n\A_C.Ck_-a>$DJ'j:>g.u/jqaES=C-O/QlgsjpPd$I>4%bVUXC&E2V"U#II`u0P;5.6_m0'8[%++J-Gl-gL,fk"W2'oIF:V-g[SKG(&.VI-gUPXqd%VPRY.bG7?mrp+`qf\HKqlW%]-.ZsRMlW%]-$@2I.H55j'Xbt_q9'prcAYi?5%+K(48Y_rrqr]1_iDcIH_P5d>r++F&pd^4V%jgoEi,.-p.QnLT\g5Vo=OK>hZ'`D9TT`<nj#eE-sSF75W.nSUk*np0dY`*pB%C[,:%/Z\c%Oj(Z1jmS%u#t#+1Q[cfi*dmbaT\kr.nfW4!CF&5ung&c<h@cu*A1Th7OXbK^3CY@&_[p41\nJ?4Q,H>T,12/6LC$=%q3pft%N+4qUde)mb*SMR-Q6=f)G`Lm:+>UB:qao7V1VRApaWSeEIcr4G/J/2T^c"$2Bm:NQ[N1&k6"m?'6G\%2A(n)XP_]As@lUot"sZAb%+UK?S,aklqYZ45Y'8o6)EA?E5RF#r+ADh#-1I-s@0,#84Jq2cURP9[6\u*+CS??E).KOL]XKb)2,V&k\Q15:3"+^i1l""$8&^gYE%Y%_!08V4IT,s3[k#(_AN@E&KE,R1iW+USO--n5KhKXMR_E$@daN5e;;;DLL*StGPT&BV?_,=Di@))F)`UnSu\`q-kDLDQKaTG>LF%8N\:7cUeKfW%N1oUhPHt!YYh/J9ae?^`Z0TTRg8QgX"Mi&1WcYAh:hXn\8LciB1$>5^%ku3$;K51-dZ3cpCib$I]<P,Rm/n"X8[$%'hL)F>%mM6?n-tH3+0@)W.n.\7>la0_1Y=a1a3m<(RPSR#X*"NY[aEOTLJ&p84>j=)s3^W>MLo72[O5Y@#?GS1,AqbjL\e80[JSg%BSN*)!C/@:nWTQ60g0Xc1Yj`ZF9_r"GnBaG;KN.$(maJ5"a[b]-*/e1=ePuNJ/54cF;@pb\H%H%7:.5j7QO,dA=au=11paah\*A_%nQeXN.LKY$jFoTp;8!+.21e?>c%0ZR[EuC:RD:\J=+Mf0KK+_nk(*@=_f,Wc^ei+HKK(YcI2CR80K[?8?iruSa[4;Y5tR&+&Er:;%BQY6;!I*a2DQ%!,&8aN9P>k+IP4B4a1l&)KqCmj;nIh50).oSs-CA9D;?IVFK&U%tAgKhi7`(Opg*e/^A-$ta(L^W8OSKIcOWS8=%!q9$`&SROW6lSq=,ZPJ@UjRh[Z7:hH0B7dLR"3l$@;%-X@mbJN0OE^c2?R$5k\;I^G\P@;<YCU7M)_4X&J4$Yc!Z3'NI6e"!t(0D%kZT@$,`3.)\js8?8dB-efk#f(11;,1aCAl`W#]6]*/M9tB\CW*Gp[o9&Aufs%RVXQJY026Q[*u\H'fQS2TAYs\R?iW>sp<"K+R0u%i2@qr";&.%$raQb1#0Qb'c$kt83d]:1jTEQa_kfHaW-;;">D#HPb3qqbQ+VGi9nC7TGP('duZ@W#hXJNF:HGB+I\&!X[AaC"F"g;%&nD2#%_-XJ_ib3+3m"'$!kgkB5/]Xe'j-(HR^Rr@6I]BM6ki3\P3NY)F=2X:k;gWaP#<@4*:UFg#>u]V8D<\kVJiJ8+DAi54l<Lj%#eU7!HjH)&[VVUD!l/RP;,$QaEnu[c63*9Q+?T)qBHp"k5XEdbTSb"`+@$EE1gHVqEC;GA=:iI5:^#.d+cmt;YXkX#dZG"DI2?G3%E#Y6J6>EA,MBG_aJ\XFZ%a.@22Z[TOi/*28]^)kV_h>B>n6*a9?SRD%+NFc';h>rG9hbKcM1QR&[gA;3J;#UO\Hkt2[Uo4r#-tK>%!.@tl#^.HI\2^AG.O5/D8!5Pt&)gABO"dF6$ehj[QR-RC2r,M]<)FbObf0-iLVZAS$#>N0Mof$-b/\OU`CC$C[?'0NJ8E:.N?H"B%)aLZYZVWr\M<CRl.Mu^HY2c:(;D<%q^1jo)=hu)^o)P%E"+hr6!<'T/W.9Cp9oq"HMJ<;i_0"$8,UN[,j2'N50L_=[&cF:%-Fd#"%$:0UV9<-4S5_T4G`W/@k^DVo&LHq+QL_W":BMShJNFJ*>*)_T1*)"BRP@"WJ0F/(@h?[YE#f&)KcQGJL9,Ki<i0ZqNOBf,La@*j1%@:j"d9)spfQmqpHC(l,!`dCfr+TRLT+\I8AH3co<[hL73!$2BO5qs-K.a.BF71TED%`rCMD29^!,q^:aa'4i[VAi3>hnVee:)K.=%>Y5U$9#<=l8DLHg'-PAr@A8N\,;TI4%Br<R\h&BrXoOR>@8qtBMEi5D^Ou]0(<cCo:sgs"-n&O1<)FnSW!+<*[-q^r^l(I(8-@89%,"4g$[1WT31Em[ABa^_M_5p8Ggi>"$&JB0$\OfUdJP70@[fD8F"DWqU,)_1A%1`XP3H]7$`-+8ePl\[aSkNNPQmnG*<V`Kpe6"sA%I'=C>`kk0)0N;-gJ.71b]RXDb`H<&T"R7DaF%eG&!GVp4N+sTY<EPt8Temc$^)oW0d(#;OiY(f:,;_81_.5Z%2`*-QbD)_"n\M&S%EYT>r+>*tpkS$K$#@\gH90nMO,KNkeU)\/*+gZ45;!1_CLcuJmLeu\LXr5n)->d'+W$XD]=G9-E,a/;(a:h)Y"+2)Z7mW#I,)B5i%UAQ\d0`ZHaY"8d/j;GI<ib2LNi0Nc?3g0b@no[Yn3G"Sh-7(o4.3Od;66\F_JM]!9(tD*;X0=uPi`neWBR.09'nj)=ES<JmQOp/`%1Q6;;AY<_dgH`=95s_QU8-!X$&4N3VU,W\dl!+R)<#\-+_@ksdF(o661_Pd@#pK-r/6Wbd<[P2DLq,k#kBaSf"G.=?ngG1b+B]Bi%73'@AW#*A8*&9i[$UL^X&`n]]F-($#^Hh=e5r`ii#VD$`bYVR%#U16TiFY-^(<%bX@Sm1PMZTX:'1do]3KW5t&u4.dEX>C/,OT[U%^(B4QL(+u_ZY?2V&BMl^(JVoh9\\.$6#*"9f'N`rCHNH?,SKbEOG>.D5Qnl6&XYYo"p,affHpf&JOKXi8.*:lO[t;^&WVrI\Ja@.%)(,\eRhCBif`;e'+Arm%@TKM=Cb$dH72*88-(onnhle/a`Nkb9_Ec^081d+=$QZ5VKe7t"bI&MNnC^]D@.Vnb"/lX]`,sp!A5-I9%?iZL/.&eLd,9/ErD-(7A=9:R_9jHTWa]T70l+cUnJI2l,='\N9VeqV0!U3%mJ2EiriL6/WJFZ>kL")AX5=-,-ONj9qJgS!WZp`6X%'dNtQU$D6;"aM_)WIUEJFCg)49Z*.I\11p!>Si!jC][Km!d*?%LV2cE5QsRfg_#`;+sV)b0R^g'<tBKT+kVJ[_:_ip/jt&`"BChA%ifco`YQ0=H_XS>]L=4F-=g$^N(2bROKm<YS*=2eM9]$;(Rh1D[cf5nQAe'n6Je6B5%Ut.+_g.s/DD6s$HfGpZS+@""^t8eufoGh[%EYNtRl5$mc@<UV(A$oPg0t[LU#ShW4in9Iq\lLp+KZ&Bk+%CbuTb,_0aO+0B/G=&k!WJI@cgkTJ6#LOb0Kgt_`^I9;*Xi)M3!bo4%%a&)X+B*KOO-_G7+86(9KnB@^%OUoOjCSJ>8+1#!XTkRg0``>S@gR.7"*J'=IH9*u[^Ofl3)Na7-))]k3+H,PKsR,ri0FJ!RYsl"%)R&<P8.0WWIEUVS^C]o:h#.>POVJE^<br*CF2CFm8r/=-E7'=b#_RrV.V&UKTu3c[mNMkF<sqb6lAH4ET?$M/!n7ijKRSGC+G!5-%I11anDuu#PaK`OU8=1Sm_$&^K*@.#i-!@[P-M\aGRbRsrr.IKX.$AQ.'N`c1oqG_a:dkJ?]Y:K24U%oE#$Z2oa"pjR/;V(f+5>^,%]1NXe#B[?TT5b^8Ls,rJglU'R0US[:(.9kKE+!)UKEAQ5!$)dVZ+>2pj;G=K,s`$q13;-o)J2)S3YN=[*,m9VW<$`?(X'uu"*n4m%#n:5bOT6;uOH:SR%Y5lI/Hm>)4bt&eF<m[pQQ^(+D31H0L!\ji<qh>1]F]]h"[Zo.BRd2(pH0/j$Q4_R%gd8!K^fLDJ]5T9m3U:R%!W\e,N,d`P[DAt7XC*=i#uDj<&5a[W&A<(T=HJb4Y]?+X&Olpp0bN>EY,;;>9pn-u+[I/%KA3hD'L_<IdhQmK!bdP82T19e,.USr%8J"`D)'sUh4@L+[Cg?N'F@HS4Qp?no]bS?EVPl<9_<_RMND]0g/Gk_X$%U;L[?6C\((!e^8J"`DYn4TgSt_01d:`\YKM_bJ9Rp5"%<_@lQJp0maB,(;/Ah+K%KF#oq>r=_F1e)$q@R=Od!&]pMPc0_''"r:V,)lB^",r'#&kFb9ikm#[kIsHU!t']aZ)MHe&,<lC)G'pN%7]DC.Mm,a&)G,O:)Ms13NUmim'G>o(@]M4U+NXcSmpHE$!4K3U@5L5nk\5)p!'2YuA!?s3UTt=`+gFRg)G,O:)Ms13NUmiq'K?#]%M!5OC0nBL^Xf3/#CYuNE?5G)e!6Z14"d_q8c#a8b1J2L0'8/dUe4:3?e4;,YDk&1]e3atr*_X;>!?Sirh(UYk7OZ1:!(^!N%=l&,%(>EPgTTF(]&e`gSgN@NV!anldO6e;$7(rY9<J<d@j>[JlBH\XafJl)--FF[_oMJ.'#%Z)D!#=-3Lk6]lU$*oFOV(PJ.3OcS_P$sM%*!Ht^80gT>S=_3n.Xi"Y'TOF@'X/iJ"Z6A'^aG5ba@P?ikXkCY6o%"e'M!0`"VS15-AgA757o6MfLb^4.$>!8Y`\u$cm4F!*[.5U%.*%I4;_fdEMFi@d!TZ3I,\W<2LtF[O;'o;u,l/nt8HpS>&O6_9&juar+H[7u`_fTskTbmoJ8coe*(M_4BTYt$Z#P4:9PQ;GkbA\7%)5&)u!@j1&&-Y-^6IAVi,9s'r;Etpl!f$iuE>1sj,*<GAEIK**C@P3K-c6HL+9Ri2W$!EQ'^,f/77'"pN0ZjR5pQPc6NQ7-$7';I%8;PnX5>`b-X<dWjoLK073(\W-?kPjnNf['OPiKhU.HqKW`IPat!-0%_'!t1T6u8A8[OdC1UhT+6&tbrl*=[\VfUekW-G!7:M]`_m%#_e4g1lN1sIIW,bC]il05Lco.J/Ut1L_diOM2a;*iDKhO7A9bo%l-,l[>J;oTb&SK:_8l/W&Q6:Uc-/B`$,4s+:05q,ShR^c;9`u%)(?;W![N&akX=#PJ-h$jEJ-YJ5oN3#PXM-[6QAWJOsMuI";*5K9-Q:>:kVIV.M[dA,^H'P7+Wo?&VPb+6pY6X%\k5EjHA4f/d[F=%W.?4MBTZDQfJl5q/nM+`,RTXoJ`;m'ej:3>.*<,/)$ajm/Q<@2Z41drYt0B`89.;/81obO3("91<NoFJ$BX>"!Yeq@(e,&DEtSW[%691!^Q+hQ0R(&2O&Jb[L"%a'O,-_]aEJ>ZBWb<hQ,S9Jg,8=Fa+@Zp"EtSXF690u3Q:.?]6QAWJ&tfGl+JM;6+_'I?7CeZA;NW@m%Op;=kFKM8S5q()O'GLo90Ig6uqP]D7J?VRp)G#I9(5[a$NAH5mJk*8$+;-?D"lf\i'&qn,i.b:U.=d@e$7'($+e`9la&)ld[Dc);%ZAmKZ<CeB#%4"5-$t5:Z`]8p\W</rm:d?96'VlF."u6>p_+l0dd85fI,Gnq6g(4W)M$0c.,`%8==GY`l7o;0U`0:rCLgiY<.0Yfq%9S+\H&J>G+EZ>fL-%W?2Yoo0"T%$"<7)VVSM;1'\&N3Y1PS=I\@R5Yr"d#EOJOI#3845R>j2dUefVCEg9gU$)C*3g,@O)^52pP9b%9c5`5K`[uN&91;D<%Lrj&aou3"[kA2$C[,CfnNUj80gG0,hXGP,b%2>S>-@Z.VME]"[oU<!gNi.@&?15i(51<,-#Wne5U6^)p&g<%OT78#";*@$$]uCk.)Mj=RRA;b,RY<c'L5,D"VMDC+qYtqN?c?<,Z(om(*jM!:]j9#&L4Ol\T*Y(Cs&t2.23?4Jd>?`+N'TKM3'*I%LmY-\O`=;388TU[KL>mk5S?K'81[/HS0Q$#me*#W,bXoM&)WJ4*nl7Xf[,p6'gVS?$)1Ne817T]EE#3>]%>L7$GI]s.hm(S#9a)0%+o;qHEF,@JW_c$hO`-Q(PP:@Cjl$LkUOYTR_ZYsoKb>Sk5_9#'62\ei#XDok#)U\d0+eDr+@<Gt=-gdghj+9(gEh[R59Z^#+idGG%6o$/U`1T@]QZ<W=&/hc<&K9gYb+K(`6lYr38N_97!bbnGK#mNk,Vh4'3*Q)"!XU+h+;AoH#9a;.%*9V()WrE`TGBMC2Y+eLGk0At%T_u>'Oj>C#'GTUf.W@o_"c,,N.-OP=63&2sp*W2e]L3Ud6AD.-qHtLRH>*[^Sm6lggCk2,#BCe!15J0s#mLY=?-5G=5\.t86ti*W%."a!O&8gKV-1U&g,s_9F#pMT0815%jEE'0(":>\p+AgF]*/";[L?q]h`d&.LVLgsD%",(to^MrN[M<8>)8c_s"g]d7S.HbRZL!O.%03Tl^%:7ChYG>qf(SV[_UZ(f#\=L\^5/O5:Cd?p`1IBS).^ibs*!dAW@m7=%H8*20aIZFg:PkLR_QH0M%14F2`Fl7qG%f[L=_@?6%KhoE#r#mC3o[mAAi8I++!TWXQimVVg4E/pldKF"IhYSHHFsRP.fY2TGQ9B?s&2SDs58P3e"Q?Tj66jf<0c3*f.!m]T9N?dPK1Hmp%N$u)$2rb#Z0-_I3*708I+^]A5//KCNKl3cE:FHh]e7FCY?d<`^O:Hn'J'SW;#@(AU<eS_X<!bjO(4.3mHEjAq/UXJ=0l:;,h\m!W%b8,J9\um>Q&%DpG$WJQ-&VN'di_Wq@;n\KL0@`XMUd.6h^VC(,OUqTQS?^_/-R^jkhhV].1GJWg_g%E)"lnQ_E[L'@]E&2d4Dr6H%B+seq_+a&3(1*Jj_]HVd6[[7N4X>n@g_0A^_N#\B%/rpS4YMTZ!<r8*]su)6[k`O#3td,U*93fmKRm!1l=8b9JUV!".cB$%?!C25%f1m/T2GeVmMP%p1bqn#DR#5a.=HCaJYTOALm,<@!#r;F+$f(F5&(c'7M5Gi"&-V>C2ZmF]Z@-o1%^j2u$8$X/NpmljjRJAbA(Y0K%p_Y*eH61`60VX5.=Mj6<1P'E&qn"P'6c63nB`em#E:>Q?0]V,%i.Zi93@I`@VjRWfl8\.DG8jmj#K-7P*_7iHTY)%-K>SE8+$r_Q%X)nDq&(8M)2Uj,dP^Lpe,9oQ/1q?XR;XF!FW$Ora-GZB^@QZG,p`R65PEHQ`KN0iG#ZEibaBes9cSQ+7*Gbr.HB,ir#@L+l.tJ!e%RMU<B)jLnaNi`H=p^R<-2KbWtK12M9%Q+fbU*&B%4JBh(Hj.;ub:R<b"@?ig7`_&%JTY*bkd!,k$&#`uE\$nRlkDP"LLtPQR,"(h%&+MAKE+8U2^&_.D*C'.!5)4]97)pD/INO'-hfas/627e[)"qd8]akd\M8he3g4Ht^8ro(Lo6CIIB1GJuNu'KY4hVTKnM'TX9HI6%%@<=I7Y8I!jU0M*RpN48XOI>2Zp'M,H!TV.CH7d%qa(;V;bQZZT(ct=l!-lp("8JS3+Vl,"J.Rc)Ka]QKD:ph"=VcLh(L\@K%u`23%4@1$?[pm\61C,<U%,qLc%/=FkK5W8*n96%>J6!-s(7pU"K!7t56QGfK*!U_E;1L=-i-W*VdY^A]O=g2gigF&)\3UN'd>\U=_:X)q%3Z]6d+,W=b+>de[U56WF"bLWa]bDSl1\(ErJ3C4l"Fr/aHEIq^',-#'X^E;D#-bb9'K6-P+Y5sLW"t&C#LTC=3/kNj/bI4/Ghe[n%!X@TgGmIWj8dCtMD^D2F+c$RUN=I*K4euX5^^_AnR*9pi"KjCO8eYiUZ/ZUPS-TaZrPWg*>4EK,+VN7!+&0sR8J+[(75R_ZiiKpk%J9++-io;IC'a;L=4q)hC\i%JlYd[j[#79$UNHd(0A[7kS$%j@4)E.F@#n-5*-B"FI66K<GKt*9V6,3S<!?WD.CctuB:'Y3e4_.Ac%kLF:V'b!l4_9;nr2;r"7!FUq^W:F2Bf#T9,/AEo)6hp"--G?S$nmAV-W2;Z`6N)R$?[<2EG(PVP3#40<\IKLu`o9$ED$V]fp/unL%/<*$t>Yb_]bQh;jnC\ijs"9$jmCYW1EQ6KsJnZ4-J0F["(I6X+A.gIK0Z#)n!0RX87<W2IJUgO_m50TCN"L_$9R%]hUK'!p2KVkQ%+uWuiZs^uZ8:\D5K*OQ,8ncR,0\A`"0`lT)_GgC)8dQ5a7m396?6D3]H[-b8!dA$Q!L"jk,5;X2o;tW2GShLQbF84QY$Js(eq<r2%MZaEb'J9if4dkMYZ0F*s5qF7&kss<,ppQ1(dL1d8?[IG/a[>n1<e96513aT;*l4MrEBX<0XG#9:b).k!=no;)$!(HoR1DU)?\8Yf%`fG%^nRMP(<`(PUiG_L$&l^7jd7TK941iEdfV+*@KZ?Y%m$t8piTL+e#V/4m<pgRD_P:/!P9NDXQP%'T(Ge=QXGFd%)UB3D_flV+%Ud>V#m5l"PR#$2(ef'06]O7K;@eoTj>_6CU'frcU2[A4]10F@oc3@^B05ng:C5*-,cSEA$9I,/Xd#65;jl(RC&."F3%DF`7#5FYG%#YFq;0]KmeFP(5J8rs:a#S3=/ktEW=:\umKJ^!.Y=GEgAK"Z4Bic5'd%s:9aKl;;fjEN#Ia^.#e;8C7.4oT=U*Z,KV2Ld[-j,8[*%`n)9a)e#*?3-`fA__Y\/S=$M4pi7?I!!rj_iE8PC*i84;j7*q%rI_>8d_JHUYU;sd/B55=o/CV7bRMqfn.W:X7:6_o>*t&3\1$9<%D"!g`>6e<>K]*fBT#l"fl3J%Io[l/iK\OQ!Tm\j[8cbiJ+iCl$'7DNEF:la:^8<=`?jE\c_dH7GQmSA8JL<+UpWY#&iWlF3&djA+%6X&ih,(U'-@,aY-*"K>n)U.AY<8i:cbmuAD2u,'"*LNM6223>V&7_Dpa/7iWQ-635PF[nIC+pp'B=hu:N1Jcj&>i0Fb,#5l)ZeiS%,Dd6!R'U5A%M9-]I[lM=0+$)I+<E?"U';nPkdRf)6]VC2Q>(Sg,hZs@3PG\p<(W/sh=C>FYDU"*+[f#>a7g#p<j(HjWd+L],V6*L%?5-1gZ*>@YpaK#Pi!$L7/4"LnQc2]gPp"ukl?Al"7t<-!U;D:[rJ8WBVT[;3E]fZFEr[s#@EoQ[.BEu"F+LO!&:d4OH3f03Ek^uu%H3C8OC5m7peq0gJ(l/?i!NVI\fer,M?jmU.Y9X_<YW!QlYK$[*CLP2<rf=1%i^lH;>MOkP@geo:M6f<-FtfK),tn=*jGH?+[_Ztd%,ItbPnb3XgOi087MAd#JlnHfMp$`M9=7T<]=AYhJ4IUp)3`/dIBLE[c+WDZ(aVJ,tcesg!%2Y4)!NAVG6>pAn'"BuKRh_acgfeY2%i/0tWJd:[G-j>mV!$LpeiirKOQoj>t3"@S3Qn0nCn<:fjIFU0Y&/5+dk9`DrR6X"G6k7hgLYN"<PFFh-rC`M?>_GM''1:0TU.0`j%@bW\ajY'_F8D+RaK'@k"T-f?'7%)eM6D65pOp4.S<e0[)(G#nIH9f,o0:4NS@CpcGWK6I<!-!K$b7-gifR=!.a!*&;TTQHW-ssc"%qe9/`6$D@r"1upgE+@26<?9$rY/Tt,_:01:2f3Of>]q>-,iUeQm)=3?N`[cePM`k%,fH6:4R%hjE1\6AMPo,n[B'@QU`61Upen?s%@FgL%hS:BtE^>[h$7$2fkXB>Y%2gOOd2H3d.<8\4a3"L@Pq^,k@b-(mHJr;Am'UaN>r+_gAk//unBH7]bu0%\g@b7BB<!=ECg;`r%fHl2aW$N,d?fa1K.pOs@7.Pub^_YL4m'Hs4K\0an"fc2s2%kY<_*oc\KL@sLLD'K?**@k[0!VA+8gFS8Q5'kK:*]G!nL0cWVa#MZ%aI4/S!<[CRFq.,S0,&$`)d=3,67Y8ibftAU3_/Il:6BCK8F.6_cqm7]R%dTsPa4f7A9kjJ6-aI*\F-4h4Kqqh$5BGXc>59GIP-/%%$[rk/5?J\.eHjiW)$04H&@UJhJIKa,6<6;H->l9r>6]P]`!_3$8S0u-U-WJXfnY:ETAX^,W[C!PU>r+d3P5>'JV_kG9T=fEkOO9c%gb\G9Mk,e,\I4nc/hSSfTS`r*&8/6=fX7:Pef'/mH>3K8:hBM]\D5:A>lrt&Qh\ct7=bTD'm?G_4(3RX8F%[4KYOA$>[6m?1CS:"%$4DO:dH%29YU*VT(RE[ZLo4g<!Sb'h[>pCl_B!8cSdp>)Sq1AO\a2;!A6k]2/n#J8B(5k%dJF8QCCEBMC#SqVl2+m/N"Dj-%.N3b%4Ga*8BsQnH%)-uKi0oX:;tp\G!&ka7PE_WD7W!OXmRUI>6SlIZ!C!m/'0?sk@l=Btq\iR#)?G?F_K:#cBm>X>'NiH<Rp?(pd6QVQ%*I^H^<c+_7__Cf;W#Z&YkH"B@Z\p?(Y,OcBZERs[1mh&DN+t%BjRY!.dUqftTa([,l&>fS4(8sIEq2A:r[=B!&rKaK6[C'q-BA?s%WT2A\VQ[K"Ts1lu;naq-/-bW=G3/fX2fnjb=NDa9?nJ7l^^9cl]'T5I1^#IRF;jXZHUao&K9&#`?tufOG46DQkY#7:D"3P3*sQ`S%QlV[<:'3K\%LN24J&ib0/RFBGs-\Lm'_ncis&Xo)<HOVE/?$FiZPnK!>)[3F,-:k(6;PC?boBE&*(u(FZS:aE=Tu]um$rS4:;O.A%E-Y5P4>-pT`?4gDbWpg1fJMX3n$3Zir&oYQ_`\b6W&f8F#m$p@LW:frf?BH:S=jp8"9=c-ft"d'VW?^p1BZJnLrPeb\\]aXG/e3K%A5bX&:5iV)'KB8@I"'I^`P_84I"dNciNrPK!(!2,SkWa.o<NZ$MoQVCdu6O+D\DdDeobi1Z6[!R$gJhZ98!0s6cM:KdGBhu:gb59%gZN9ab(mF!G.6]WNg[Y+XsJdtgpQ=EH`n)#Po1Bl6<]QM92'm2Ck!-TeD05G@RpHel7hTd>I&dAS?&G6E9=lY]>--L#b3okDn$,o%3*A]b39q,&%g<GJ=ok&`HGOZ<:d;?ZR@o@-aN'.EJsFfRV!%[p>:G:S'APtG"(bquSN>LR8L*-^dAt`8Z2Y#D@]++N-?QP*0cr`5%s*AafWQ+`Z7UnM7*4P9^Q/p$\)fmjpjR>XOf#l$,Ed*Z*)NGkV#Zrc%r4L-VVDorjis?eYC[!fs6Rr?$4;?)$dN6c$0"V/eieo.b%&"4K`F.Iso?SiRT1aP*il>YD]i4M:@\9-Y[m5;kZ@ur>aC;?"$`Kh!5^-hf?M?+T`"c$`U"*RX(A1*X0H;FY+$\T9[WP"?6<)dG/%^,om-/RINEiZEpN3Dt`i"SDO+S"+E6-Ms$j6rknY;bGP-Nh)_=A6;P8"Q_(tBeh4/"cuQ_p?N)#YV(5.XdH@J*)cmjkEJ>_:gGcH%<)C5&M,jH^!n,OinY@ADJltA;U^Ga\K.L@`"!fn#AbdhZ+<fd9SQ,]qZcY!=klK6XL)6`@MMl8Kl,&I$R@^glNAlG\\V-_-P7c?'%T2huV0O(g"MSK8!\/nZO0S/YZ%gakB+SL0eKl;$+cRU+U7?56#Va$&Ln4u-]m*0MMc:'AX00QK=Lh,5['t/j9bk?$F,\93B*:Rn$%OFN#l&>/?N@YV1dG#UBC^3i`8;^]"b>gcG[1KQ7CW5cTa8;FZY_!4ZlIpW*!EN88A?ld2D`2feE@*@Pm<'g$+$`!3g]\dfUP5%kT%8Cjdlp`Do2PK+H#;_D]SI^l**`%R+16mKlq7DZ0uVcS$%_;"0)&]6P38#MHBE!&=A%b\irKHe8W5j60t'[gmg0o+$kOmb4a6X'kV%$FlSl^&F->WVq&9&qg#e+jD!Qg!X.Qmq%C,)k;904:Rq[o1E'B)"GX:Q5V2W2IJ;4hah)SB1K5imEuKt4TdB8;l+s=0f/s\!>_Np%($c%606'jR>!G_`!^P3!ducSo#kA\efKE]-L5.k&0=_OEn;FOCV.L9hEKF1qnJqXEgXbOi&D@_s#L%$9dabg_7V[@];BgXoONI/4%Nnkpl]6L8s47(sXXII24*'P1#f`Ml9OWsOba6eJ<L1HJM%WIMV@&(P$/'dJ#Sm2l0*)kH8VWSq^6AErYcGeNK9gWEnTMAN/?<,'\%NaVgoQ+<e$lXH_\:[NJ$^8t8in6nfWFf7I;8*n_f$>8Erk-%>_9WCWdQR*XdpX);X`WrWFErS6%!YW4TA#,#?0goePNi]f*4Rj*l%$9Ygr%m&XNOUlnNIco=ddsqF%csWtnWj/fchL!2d"j1!eMl2@6(\+AbkG2V-JFccK4X-f@)eiVupku+?)$$j@iq>0!':k];Q*D9s%Dt+RkGBu_pTTCIKcs?`=&?q%EB9kC&P6d[C73%-?$L3)pq'C!t#me2<PuD31W7&38ADHsLB%@Za@gE/($_sd)#!41j%C.qe,28YH%\]Ok0"5Z!FK7l4<?pAR%D:su$&O\Pn%Z+FC8<q`sFphF,'i;_S86V2K"bMWOTA.04icn8!IL/<d;6IS%>=BmMW&^b)j]R57=YRlS%Ft?W\*7=5*W7`"EJcg3'>F-J/_.`\VHM's`95oh6=*aY_hZJTbH>7p$qAhr@]>jY.FSjH?@0l..:.b3IXmuL5;XDMerHeg5fiU\^%$O"RR:EnUapq;YLDZ3\fb21p"HMP9,b6k2oPcE]c%DuXEM7Z+Sn!"52F?"q,=6)[,bE5G6F]=nGlcG7XjbB>kf9)HEEq`PlCLV]b%qf5+H2h*>r[GTbcHMP8tbt<_l:;o,IpllXU[@qqt:jZp'C[2N=`.4!TKQ/!)AtDW5=)#UJ:*Fnc<]*#TUbU)/0,Dp]c=?Xi)e,Ql%b:+PAYkYUlDA5C%2oPoJX^enrE@4t(YIkB:pmS&?hTqjs!ec]hqsn=&eC@OD>r`Cd@+](NRFW?>ms6s[b:,E<?JTf/p*lh:fK2pr%Og-sSRZb(L3YJH3SHB7BS`NcmIPJ]+&sTsc[e=A?+(9kP5MljG_\Q>;q-I5m92,s$.JHK!'goFTgC;e+V)if!,"*T+g7W`>Y(PSb%-Ufg-F2GfTHn7eK)uFG#ZpH;MD,jeaE!3T8MA@-fX@S$WoMhYfP%m5Z4W79Yo&+lC\n-k;Ec;POFLrWmd)6#'$Y17E/TslAWq-ZP%QbDeEDssn2>*"\oGtgn]@q(P8nA,#ejbc,1k*A0>Gur`M&UXSQ,#c:o'GY':"=2+Rn[LS[_..%oeq'pg;..%aT8JDF@FLDDC*AF7%-j,T7D@UHn%ZKVkBJ60h+0f#EZEH2*'u?n(m!0!+@)"oY:VobIIbTpg<>1P4jiK+U*>B!V7^/Pa3+[&%L2OA\2]AmO0gi!g`27d\%n*GN<Q7&4mnUik+,/%EH537<c*mEP2qn+*.G\;b^a"nS,&2:4=!JCr4')%L22R8MU6!jdq[>SPhJ>&X_P5P#MIOiT2.44N0=s/Rq%S>8M/X+4lKo>g6M;0O;6aLaNP05t%5q;'\e.t_CunV\FXd^1nTL;T,Ao\/uK>&8=PCb#:]?'EhhdY4.pT>JT'(;g^H`iAeB>DY$!%FmnD\^=qUo`";.Ch/")PTaD&u#r\>V6c?U!&&`:/X/p,3"BuU8gRq+4!lKoZc0.ak5Fh1ZMX@#j^P7OP7Wtc=MPJM?ENe9o@4+G,%B)j?m^BZ9s(kc](']1*_],=p^3Wckq'c?L22\LC0)nH8&bC[:2n%)p#g6fAqcWq2<\B']MqSnr^7fh8l"c))\1<d2U;I/1h'.QV]%bAJ6F84pJ[-H"h\RM,?52\XJA]WuH&*Bibc2T+F.!>?71a"aKa$HXM06qadOB,/=RdAK>*#f.^sP)cM*WS$gM\%ohILRJEUN:0=D%(eG&T)0V(n'[u2#?s@rP\(W9:2&QPPU.HVXg+b3RUsN/#XVue3/!7giX,`iJ<1uCt0Z<N/ESl^!*/%*BK]5WE;S]Tb2G)&gC1;2a%n&e<%7NQ)IAE[.PC)2Y"Z/-KeOXHqDGe4.'(SkPf5u(B!m:#qo),`E;=6-G$E>2HL@:;T"e9/o8q*%XfDZl"opU#Ns2]usiMaIos%DUM"3Z"[XEY;6'W-HD^E#75B=d&q8,S@191910hk=jdsNX,Q6`ff9JE%S/m%Jug68L.'h$@etbd[+Fa3$9)[[FZ=NF)<p`fNkdYI%fs.dPc`*lg7ANLAN46;]3h4[Y#X5&-Y[Kj<k^>A0a:gOf5+-CPEWkVJW1X>G9?8E'6^oO;l-&gKOR<C,5r&RKbN/Pk?]Z[e"bMq]%aSr#]'$adBSMoh``>Fa8N#42:N923[_F6jQj";].)>ik]en,Y$gW&Xno@!eajAl_Fb`eD.&[S5<nYkPGh2t]$*B>Chna5Jk\[GTq%m27V/Y0qPkn3%@-_>7m`^'sk0+l\<DZd2gK%T+b)C+YTpLX_SU"Woc,hT-9gY8N2YKT8to;9s]/32QQg5[D6[DF?VLI7+JGhl$1e%fGao(Ut3+R#n0J2&5SiO_e;U(*0R^l=?rqQr/6JM@o>Kl$jPW3U)Y1\9.H#I"Up[tBsff[,2?`F!4#)#CWnEK2qeH"@\U_L)hV$9%BeC"h#9dRBp;>Um:%"XLrOiFEq%=gd(MK(4ekN'oBH_1Woc>;4fd,KX,Kq@7U-*fW1]ci[,K^U-(ugc&Mq>4,Z(e-BC[8Y$#39dq%Qh"0cH?^$KrOQZt5)M,7>b)7)OqaXLQYCU+/uld?m)YH$#kf]"brrGF8'FpnoN#,Vg/U2D5jN.c,E3GsIp8`W5a"qHnXM(`74&bG%,$$s!,Z9dReUbX]XYqLW#)VTaLK@n?9DpKEQpN9>b-gWO,u0+Z^t.NCNaBW53.d>9V3$DjXI,RV!Rm5S#j\bKR1@:1+h&=Nq*Cf>%,u/,r&"'!ekj?#4oQ]p_aotaX_[nRYaDb!n1]XP99$(heeDL.^(h*XoaG*_QWb[BC;)2L=+n1g/2=5Z>fHthJ3;5WW1I*_=Wo7nL%SZ,nVEekU)^_g41dfFK>K8.IQK=MQq_PCCS2oieNfQ%K)o<Kst84O<2.(02=W<NK\_cK+V2BXQcecN&dn&I"f$l;ZG]Gme.'-ql$%eC(BW&`HqbaHa/BEfh>gEl<IRYl.JNOhULDmkP]M]u7W>ien&O("G%c8&Q%Gor`i?9/sAEV.;_d>V_sus5$67*#rZ=?soBV^rh"E%,^ct-p/\dQJ+J`Y(PQ@ub#lME!NG:R/pif*)*q7.ad[$J+Wt$?]E4>^goVcu.?t"0#&E]O%-s&^JMd$n"g4hKfF]tP4Dp0&c>4Wm%$u\_#X<)M/a]3p*pQ1^mZZmFVm`=Eu&-??G$ooS4jmD2tD"Ker>OF_Z#S,0JGQNoINBFOr_j'1[IL\"krGSZVRAbRZRk@AtWg\lj%0EguQPh'DJ(R^C9/=];7!?Lp"JA@+9%naVM(uZCiKA^[[G&Y/OX:Kb?60pdV?\MPB*%"r=/B%A9:Y+!\.S):_ZJ?uJ:'#5?O'J4r%";6t_VBZ.6K?5ES82163Yt^E[ZZ,Fk(fW<8^qC!>8W:R12a]hFfJ:KEi[0GkD3PYB8pEuu4G?fV2Ds#Lg<n$A)3Vt_Y)c@Bfl@VT%3VH8AfM-bO&Ij,V[t:*@`mekb$OBY9aLX*bc9Ug5$&2n"j8!--:#s,O/luad7qT1:c3A\$)#VD5XJe-@l8DHaG/uG_L'Zsu&X_D^%Z)pBkYmck(`RpA,Z[_H6aZI!mL6;kr\+0qC0SJ)D;nU\,;7.B2(h'+1k0GONr1lQ_b7%r)Bc37Efi\.eStI<6IV!$8:\rPDaof2g%;R"Zc7uWa[GcU]j.=9c,pe#:]I\%`Mo8ul8NSPgkQ?r2S>Fo2RV&gTtECXo*0n\6u33!0R,`^f+/ppL5TVB6!E>Li#\P*qUQi',S%mDaZ12\Bn='dkeHLe'c4F&LFEA0f2DC#=e(^M1PI$WB=/Z8*uZ'MIdkQiTkI+/15Z?&L$hc7O@YTV]epWA:u486cpl-K\3$"hZC2%2tG7h/rNss=Z$=oGQks//(\?pj_0s<>nu!/mAe>J(0!1gl5@,D<45r;:oroe'9j6aQ#ObIK*[9l,EoHF+i54tqOGN&,?=nS]^nF`%J52-H4B2^8-#"%u,3?5g9HKLN@eYD,f=.Rs?N4REE!ISK2n+^Q4^e/5L6tb_q<cU]9/Q66L$RD[r'dZQl^;681D#>W]SPNm[SS@H%#jjlOP$D>'T&DRCOMn3;gFY\#PS]<J2<Z0n77fX%^,p(@Hju&np1."&7!E4n=%C!QU7O"P"%P7*12^d^fZ8[rS@M+*eCEu>D]+6V%P[eF6$t8khl@H[d$O(k6"%_LbE14@A\[5@;Z4>D\8;rguo=(i[%gg>uZP-!e+o#ZtlM'-B8<Z.V3hjRPDV,=@mY6c1B<)rLaA+O+%=Ab*X!s_Ar7kh,tP]TN[jTo1)5a`)64^u.":k1Wo'NZ!scVEO\1lUZ%R$UW&quPG6*/@eO"ACJo5a[tj`!DIXqMN,o8TAI1E`ln6%%kaGIN0<_IAa3O3gJ-2M#juK7"6RRJ*I;Vn7E>BkS$FfH(bfU*(e;f,':q!-c:_M+44-?cZ#@m2EeT1'U!Pqh2KaDQ*;OM\E+p)5%60*^Xo(WXbB44sh^\LgP?c=(7Ki40adq?T1?\@^cYSp:0K2h1poIeNX)gUohL%#[YOkd2X_q1ADQt5QtVn?`G,.M@9`:#:X[N#$k%^=CZZ[T5<cYU78n)N_O)QnPeQM*X[11NJO\2IO+-JM7D#D8q0Y3nD:7MTj9h?ZrM<@7K06-l8d387K97@*&KsN2aX1_`D0EetB6U%*SVMKWX3_hg4mQuD>)/%7BTon;1-8"(3V74Hl(T=h]pYNNVWA6L(/ZMf[k[e!YqA=V#,mXT'I!eXoYg[)kODgqpO6UZ8gs3g'?.$%JCNFfrhEbM8Z[XVS/NK2,[;'TCPCE/'!)TE1$_3BeG?s;jg'$Yq@F4E4ug!Q%t%/m^<>%6YGo,,[QYDf33"jC=o3;@lU*q]qV^#7%2;iOW:$XURXUbGrV2=)JUp+a[!a\d7JSotQQfnUj>/:N-VqW:5EVi,=eG]H6Tk(mjp4n0cr?5Q`J&&/,B%]+Nc?Ys,g)og2@OL\H%a'LuBIs>6tOq;;@1(L3o'sJE%kVcHQ1bkF)DN]bW6>`.deI=m[V_#kRc'$?H;bX:*S0H":>_VY_P#7M:R"T57p9'9\bWsJ(j$R$N%+n-g*nkLVXAg7SKmK)r*FThF2J;hdTmSY5>^*bA>h?rW6Ff=t$<*57E`6".)&8U>7`Na3bK^WVphTl((RVFM4$E4K8]$/9CFsMI]%`qH]N:H;20b>^:l*b]sI55X_/@!_\S;F]r#Y6H1cOPdcDjqL17h7`u'[r4AZRB-;[:"j59]dI4h+DVfgK$'8b8GGosOpI^n`,ou#%6/!!T\BIV7V%GG-;!7tM=t%Li>+d;[A8`m>!T@R4?5^H(Gr.5Y?B3_O&GH;2bg/f"pA*@LnnmQ">H3O5!tri4][Q]@!GPXq+PWbh%KbG(G\lFCJ$fk^RcorTn0MbN\bS([E$=n1>F&F1^FL+<fRsBUc$t*[Raj:;:8Pql`C<f17*C5idRT%9B]r`5;WS8#,6.?M-=;ViY%o3km1p'.Kt@u@l>p(g45J7K2RCOj-Ob[KRO1t5h[9!j3k!)1'88CE=Sgn#Iq4+cfAb_$"NL;s`pM@-6Ffao[6JD1J?aN-]Q3i*cV%/m0t-9dH&e],:mNaV)Ub1!i2,AnDMjg_^9:aq(?pR@:Bm6h8_noVk'0N1]:)gHGQb#nP=QnU@GEl\NY7f*-chAmAYU8T;%\NO/rS%3kQ&P#.\!q#jV5b;WG%9,]b3IB>P%=Pu3hVLa7A2goPkHi*EO_po#Bl1K*4Mi/QUe#0)+Z++nqR:P_H12M>EfZpE>R=@Mut[Tm4_%5YQ\\.*LpqIORV"a4)8Bct.mAUmEI,MM^g&+[QTL^Wa[DEBRV.3[j)sfn:ft2^D2(_PTQKA>4:o5E\+Jc]5c4(bE7\kKDH7G$/Q_%oBh,0VK6pt!&R1"q?S70@P;`5JEq`9rp*Ag'IEr6r;\:%-&inA[S%aP:Hn&_[1mfn/0Le-ouYC"$gSJZ)8Ig2lP%X43Ng]9KUB%e%,BX<a'jmVA;q.XJ>4r1`d)\EhOY2>Sr077:WknT#Eaneo!?.%(r^tE.goB`YdN!49Li3D3:(KDj8EGHM5m&fEX#@%e7gp6^I)doY%1DZb1O!-E<RAt-R@D??pg[.oKJ@a!30*';XYPO!i7l4HrI!+F1R1_2?E!8U0g4fXHbgUq'e+jNkN:.TKYS[(h+XI>AAq)9<H-A2U%B"B,J8_>^iSVLXoI+TH$N@Eo>D9">#WGVt^JLo1^5"6Z(c5O,";f:*N5E*$9@7mhM.X]Ei(t)5[aQL"Iak_@<;\e/WD],cS10eX(%JO2Lg1pAQ.An[f6V@u9/M6K7]<,/sM*a>U5U!?=FL[Jp5+W5Rj>JEGdQQqJkGc)3!h:+JU`@UM>_`In![Dd@4Yk5Bl]*<Js*;8Fg%:8l/9qfCCJe=VpHc2d'W[@r:eWN7)K%Be]5>UIQ8T1Z-*W-mMB#K9B^Q0=,-3JBul^2-o\WOB$NO:W.sOK_Aci^k5b6RpiENKXmP%qI3Y/$2KddjLoQ+]T&NCc2ll2&L-ocoL-oHfK&Rtc$7`hq_UoqShI^/3sV0I+TDZJs!9)qis2VPpAfmXg^e`2+8b%.d'562Ul!57%.T5C:!5#^S5klIbJ;:h[le3h.64NL"01^[Z9&,nD&_&&lc-dm9#4e77Xlb0&9nVAhQcu6+Wm&mfR\['?h_0'E65(L4d#^%cEh\f7%@r`bfd#qjYjNqg1GU?q&cj!?fZB?SqMp)S%OC+t<?3t;K,XP9ngbt6fUi047#stgi#T*#tVsQWa"6+1jBlN"76ms"kUr-7,]Kg<k%acm+(c2"i1!LPn=a9K:KmRpg!2foRl0080bMH\l#07==u[fSboRK2!r),AESG8"`igMJ2)=rsXmT7]ZMg)'acU&Yq2.ZHbbPCGfa%jV2e&/[D1RnijA#c$AZeX+6SVC2,@?!4bDN/ud;2JV/YX*=8Kkb%sTH%#WrLTd8>2!2b(J=%4LR'#$X;7#11cD$*_@aK.b[]UU1$%5D!,CQ-^Z\TUKPLN/XD#!pE,lia8pD6C?JfU4`$4B`a,6:CPtJ"B>W&M[FK+er8<;P13HaYQ]#UOGad<Q+7t/#k(LHp]7^Tq)5*N%Rs!ZU)Hi`jD@X3Z&'uao\hIYUY9pTWSQeUQ-mVSCd25:%AC=ZB<Y>G]=Q^4JahZ`bJ?k\1DiJVZgUE]P:sju<,Z'W/Gu#_V,uL?I%qN*#nfeD>GM)RQH]hKfb&*nou7&hXlfE>1e2-80@LH9eWQ-`g&ErYjjF6C"k`#$UgnZZ+ZXp\\!*9*k+MoD@&=Sa2$EaLDsE4Y1C%[7pHk>:gfbe\]\cIT\6nlj+9(XVTE"St[(EiF@B[4pLiA'-K;_!)s!kn-Mh]n3PG#OpRB%Vk7]B'(26>7j.\j)u;`$&;ph/Q+*0E%ZcC?5ACEpoIf'0`1S-c9'\%KD*'_NFK=ch[MhF4go#j]ZPeo)7-;ik_1C!XEZ_;@9"A"OpBVgO>\+Ac^60W=pk79o2E.\P]O$UMJ%n?4'DK[e?s%6K(/5KHi=#ESt8!c9?ACP2?VJVoE-g1-ioRA5ia15K`,YF<ubN&safedFeoouPga&8FNVGh,V5!&,GI.22asfS90'%YS];kB=pRiZOGQc&FpVb\Z>!G2lV?A5-%'LS)Mg.B"c+a_dfVm8X:<U+lr<ubtfM\I<7],r9sSU$A@#4d1BpaUAtml;3@pN?E!='%;tV<3Jui8=3c21Q12:YeJ0b(E9&i_\K8VFkk'<*a"N_iGT8jVfljC2U;!"KcajMF&Vndq4[8LaQ_o04nIs\%m*'i3#ap]p5Z1n`a%E"%jM9mCW?'WE\e,eF]4C3Z4#q2iotR&U$7^UkZn4Z;SeE!Y1HA:;SlM9Mt(Hl&(db.LiGTlc%:V,!$Qi>WJ_i9V_=@EX>GH^W-L%05a>gP;(+_4>\e=aJ6h`FEB<-#Vh493#$Yp]F>?OS2UI^=Kt)F2I22Sa2bDRZK-Ids*'K/C\k[l2lT5>5SGOdUDS(`d$/hiGP8[G%Q#/la+X+\5^EKIR6EZD1[9Bd8\7dW[e"@h/"4UA:IX!'*j@+H)(?<B"]W`&Y6A"8UaS4h+;:rB9@>%<?$b!<qi5IG3!5]56.O[Uc%Fq+Qr>2i)O.8HQ\1)I%'D$t95(HF.,'D?)&C;,4rn3"P(V-[ZIg*oo.U2PTf3uIN\&0i84TolMF-+1)RYk0cI"LDFNg2)+bd;Tc<%_Fful`g`JJ%)S0$>]1at[6\QK5qccrA'^@p<DZ`#mD"?S.&O0'_T01[*p6:J->#n;mU,&<E"dp:cVb7=#)@$>pk-"g?M^Bd+*PsV%Q^glF9d%t!;7)nMDd<JG1T%aL84(r9fB%@09M7e*%.%pbZ,!"@IdVpje0_1,[6t6n96A7^`!B45,QR"fBo0*OBSeud)U$D>n?Glk%Y(qSJ`>jT7X+;e?5R)/u_;!mul"UF5`/"tI2=Pr`'A:f!84=>O!QJ"i.0p>LI."fa>=WeCJ@N#8Ee+7aU#<rAe/U/:bolceV,4Zh%$!uc:a,k0?S*3D+1T[MmRD=Fp2s(aY2PB%AcuU5VctOEH3^jS)9M7flef5Z'*n=%de09uhmX&)qI,,&+l3MaN0)<b_"#UNXZ_)R%%c`gZJ9m$ZX]IqZD$p^Kc@N\0o7O)1FDA<2t9u/r'8b2t"kU@(dZ(^h6$0rF:TRqea+V;gkZnOpO(8n4?BG0rtMO=^Oe)W,5nUdK'%3r)KEBW>9AZXY6fEfj[9B*GKSg*@r,R`.\+"/]uRKU]\poe6H`SG+eWQLbFch7>&]1A#jQ2!RMk?T$p8MX*+r)VtCYCjmor^0@h'%>]GUN&ah1(Y<6-?<uH.DW,>0.U2A%t(YW)V>6ppLJ6^1S_9pH(OK&k9Q7=uke"8o)?n%7im5)gj_B+)YQnUtiNBp:=H&r14l6b(O%67K6=KOD<@LD7WojcnE[eF&bsTW^;0T^N8n"#!frEgHu[X%3iR%=BN0klAuJg?]Cn8/higRfOYLO3%_*0IrNq:d'"of`-<6XJ-4t%n`DU.=RI!TfZdT/Y^k8r:o1[YQA2nRP2T_o-PNL.E?(iEVWW?i=0jS.$[A@)$<U78LCc$,,:>0=\jXj_!^]Q57Ds@"g0r,24nU@M%AGa'\-guT5pp]#SnooT`jZie*G5oV;&-).FmE^:YjhL4JrUno`J,$qKLEHNgVk:a&qen^tch#n0\"A0Ml2.qC5Q1/rYCHB40Ald'%r0K'$s7YjS^\mr_[kGMrpTOT%jEtJss5A_trQ@F]rZ@@P-HQ~>%AI9_PrivateDataEnd